;;; this defines the application for handling general school information.
;;; general school information means the basic structure of the school.

(defpackage :school.info
  (:use :cl :sqlite :ltk :cl-pdf :str :data-table)
  (:shadow cl-pdf:image cl-pdf:make-image cl-pdf:font-metrics cl-pdf:bbox cl-pdf:name cl-pdf:scale str:repeat)
  (:export :start :create-tables))

(in-package :school.info)

(defparameter *school-info-main-frame* nil)		

;; DB ACCESS FUNCTIONS

(defun create-tables (db)
  (execute-non-query db "create table school_details (id integer primary key, detail_name text unique, detail text, added_on default current_timestamp)")
  (execute-non-query db "create table levels (id integer primary key, level text unique, added_on default current_timestamp)")
  (execute-non-query db "create table classes (id integer primary key, class text unique,  level_id integer, added_on default current_timestamp, foreign key (level_id) references levels (id))")
  (execute-non-query db "create table streams (id integer primary key, class_id integer, stream text, added_on default current_timestamp, foreign key (class_id) references classes (id))")
  (execute-non-query db "create table houses (id integer primary key, house text unique, added_on default current_timestamp)")
  (execute-non-query db "create table dorms (id integer primary key, dorm text unique, added_on default current_timestamp)")
  ;; use stream is to ensure uniqueness as different classes can have the same stream
  (execute-non-query db "create table subjects (id integer primary key, subject text, subject_code text, stream_id integer, added_on default current_timestamp, foreign key (stream_id) references streams (id))")
  (execute-non-query db "create table papers (id integer primary key, paper text, paper_code text, subject_id integer, added_on default current_timestamp, foreign key (subject_id) references subjects (id))")
  (save-school-details nil nil nil nil nil nil nil t) ; initialise the table so that we only use update statement.
  )

;; define macros to define the following functions for single entry forms
(defmacro intern-name (var1 type)
  `(let ((action (case ,type
		   (:get "get-~a")
		   (:get-id "get-~a-id")
		   (:delete "delete-~a")
		   (:save "save-~a")
		   (:update "update-~a"))))
     (intern (format nil action ,var1))))

(defmacro conn (&body body)
  `(with-open-database (db (uiop:native-namestring "~/common-lisp/school/db/school.db"))
     ,@body))

(defmacro make-functions-1 (name table)
  `(progn
     (defun ,(intern-name name :get) (&optional id)
       (conn
	 (if id
	     (execute-to-list db (format nil "select id, ~a from ~a where id = ?" ,name ,table) id)
	     (execute-to-list db (format nil "select id, ~a from ~a" ,name ,table)))))
     (defun ,(intern-name name :get-id) (datum)
       (conn 
	 (caar (execute-to-list db (format nil "select id from ~a where ~a = ?" ,table ,name) datum))))
     (defun ,(intern-name name :save) (datum)
       (conn 
	 (execute-non-query db (format nil "insert into ~a (~a) values (?)" ,table ,name) datum)))
     (defun ,(intern-name name :update) (id new-datum)
       (conn 
	 (execute-non-query db (format nil "update ~a set ~a = ? where id = ?" ,table ,name) new-datum id)))
     (defun ,(intern-name name :delete) (id)
       (conn 
	 (execute-non-query db (format nil "delete from ~a where id = ?" ,table) id)))))

(make-functions-1 "level" "levels")
(make-functions-1 "house" "houses")
(make-functions-1 "dorm" "dorms")


;; SCHOOL DETAILS
(defun save-school-details (name motto location phone-number pobox fax email &optional init)
  (conn
    (dolist (detail (list (cons "name" name)
			  (cons "motto" motto)
			  (cons "location" location)
			  (cons "phone_number" phone-number)
			  (cons "pobox" pobox)
			  (cons "fax" fax)
			  (cons "email" email)))
      (if init
	  (execute-non-query db "insert into school_details (detail_name, detail) values (?, ?)" (car detail) (cdr detail))
	  (execute-non-query db "update school_details set detail = ? where detail_name = ?" (cdr detail) (car detail))))))

(defun get-school-details ()
  (conn (execute-to-list db "select detail_name, detail from school_details")))

;; CLASS FUNCTIONS
(defun get-classes (&optional level-id)
  (conn 
    (if level-id
	(execute-to-list db "select id, class from classes where level_id = ?" level-id)
	(execute-to-list db "select id, class, level_id from classes"))))

(defun get-class-id (class)
  (conn 
    (caar (execute-to-list db "select id from classes where class = ?" class))))

(defun get-class-name (class-id)
  (conn 
    (caar (execute-to-list db "select class from classes where id = ?" class-id))))

(defun save-class (level-id class)
  (conn 
    (execute-non-query db "insert into classes (level_id, class) values (?, ?)" level-id class)))

(defun update-class (class-id new-class)
  (conn 
    (execute-non-query db "update classes set class = ? where id = ?" new-class class-id)))

(defun delete-class (class-id)
  (conn 
    (execute-non-query db "delete from classes where id = ?" class-id)))

(defun iconbitmap (path-to-icon)		
  (format-wish "wm iconbitmap . ~a" path-to-icon))					

;; STREAM FUNCTIONS
(defun get-streams (&optional class-id)
  (conn 
    (if class-id
	(execute-to-list db "select id, stream, class_id from streams where class_id = ?" class-id)
	(execute-to-list db "select id, stream, class_id from streams"))))

(defun save-stream (class-id stream)
  (conn 
    (execute-non-query db "insert into streams (class_id, stream) values (?, ?)" class-id stream)))

(defun update-stream (stream-id new-stream)
  (conn 
    (execute-non-query db "update streams set stream = ? where id = ?" new-stream stream-id)))

(defun delete-stream (stream-id)
  (conn 
    (execute-non-query db "delete from streams where id = ?" stream-id)))

;; HOUSE FUNCTIONS
(defun get-houses ()
  (conn 
    (execute-to-list db "select id, house from houses")))

(defun save-house (house)
  (conn 
    (execute-non-query db "insert into houses (house) values (?)" house)))

(defun update-house (id new-house)
  (conn 
    (execute-non-query db "update houses set house = ? where id = ?" new-house id)))

(defun delete-house (id)
  (conn 
    (execute-non-query db "delete from houses where id = ?" id)))

;; SUBJECT FUNCTIONS
(defun get-subjects (&optional stream-id)
  (conn
    (if stream-id
	(execute-to-list db "select id, subject, stream_id, subject_code from subjects where stream_id = ?" stream-id)
	(execute-to-list db "select id, subject, stream_id, subject_code from subjects"))))

(defun get-stream-subjects (stream-id)
  (conn 
    (execute-to-list db "select id, subject from subjects where stream_id = ?" stream-id)))

(defun save-subject (stream-id subject subject-code)
  (conn 
    (execute-non-query db "insert into subjects (stream_id, subject, subject_code) values (?, ?, ?)" stream-id subject subject-code)))

(defun update-subject (subject-id subject subject-code)
  (conn 
    (execute-non-query db "update subjects set subject = ?, subject_code = ? where id = ?" subject subject-code subject-id)))

(defun delete-subject (subject-id)
  (conn 
    (execute-non-query db "delete from subjects where id = ?" subject-id)))

;; PAPER FUNCTIONS
(defun get-papers (subject-id)
  (conn 
    (execute-to-list db "select id, paper, paper_code from papers where subject_id = ?" subject-id)))

(defun save-paper (subject-id paper paper-code)
  (conn 
    (execute-non-query db "insert into papers (subject_id, paper, paper_code) values (?, ?, ?)" subject-id paper paper-code)))

(defun update-paper (paper-id paper paper-code)
  (conn 
    (execute-non-query db "update papers set paper = ?, paper_code = ? where id = ?" paper paper-id paper-code)))

(defun delete-paper (paper-id)
  (conn 
    (execute-non-query db "delete from papers where id = ?" paper-id)))

(defparameter *menubar* nil)

(defun prepare-main-window ()
  (grid *school-info-main-frame* 0 0)
  (grid-columnconfigure *tk* 0 :weight 1) 
  (grid-rowconfigure *tk* 0 :weight 1))

(defun level-menu (level-menu)
  "defines the functions that display the level menu on the menubar"
  (make-instance 'menubutton :master level-menu :text "New" :command (lambda () (level-form)))
  (let ((edit-level-menu (make-instance 'menu :master level-menu :text "Edit"))
	(delete-level-menu (make-instance 'menu :master level-menu :text "Delete"))
	(levels (|get-level|)))
    (dolist (level levels)
      (make-instance 'menubutton :master edit-level-menu :text (cadr level) :command (lambda () (level-form level)))
      (make-instance 'menubutton :master delete-level-menu :text (cadr level)
				 :command (lambda ()
					    (let ((message-text "Level has been deleted."))
					      (handler-case (|delete-level| (car level))
						(sqlite-constraint-error (err)
						  (declare (ignore err))
						  (setq message-text "Level can't be deleted as it has classes, first delete them and try again.")))
					      (create-menubar)
					      (grid-columnconfigure *tk* 0 :weight 1) 
					      (grid-rowconfigure *tk* 0 :weight 1)
					      (destroy *school-info-main-frame*)
					      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					      (grid *school-info-main-frame* 0 0)
					      (grid (make-instance 'label :master *school-info-main-frame* :text message-text) 1 0))))))
  (make-instance 'menubutton :master level-menu :text "Show levels" :command (lambda () (show-levels)))
  (make-instance 'menubutton :master level-menu :text "Export to PDF"
			     :command (lambda ()
					(let ((pdf-path (get-save-file :filetypes '(("PDF" ".pdf")))))
					  (unless (equal "" pdf-path)
					    (export-table-to-pdf "Levels" pdf-path '("Levels") (mapcar (lambda (level) (last level)) (|get-level|)))
					    (create-menubar)
					    (grid-columnconfigure *tk* 0 :weight 1) 
					    (grid-rowconfigure *tk* 0 :weight 1)
					    (when *school-info-main-frame*
					      (destroy *school-info-main-frame*))
					    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					    (grid *school-info-main-frame* 0 0)
					    (grid (make-instance 'label :master *school-info-main-frame* :text "The levels have been exported to pdf") 1 0))
					  )
					)))

(defun class-menu (class-menu)
  (make-instance 'menubutton :master class-menu :text "New" :command (lambda () (class-form)))
  (let ((edit-menu (make-instance 'menu :master class-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master class-menu :text "Delete"))
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (make-instance 'menubutton :master edit-level-menu :text (cadr class) :command (lambda () (class-form level class)))
	  (make-instance 'menubutton :master delete-level-menu :text (cadr class)
				     :command (lambda ()
						(let ((message "The class has been deleted.")) 
						  (handler-case (delete-class (car class))
						    (sqlite-constraint-error (err)
						      (declare (ignore err))
						      (setq message "Class can't be as it has streams, first delete them and try again.")))
						  (create-menubar)
						  (grid-columnconfigure *tk* 0 :weight 1) 
						  (grid-rowconfigure *tk* 0 :weight 1)
						  (destroy *school-info-main-frame*)
						  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
						  (grid *school-info-main-frame* 0 0)
						  (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))
						))))))
  (make-instance 'menubutton :master class-menu :text "Show classes" :command (lambda () (show-classes)))
  (make-instance 'menubutton :master class-menu :text "Export to PDF"
		 	     :command (lambda ()
					(let* ((pdf-path (get-save-file :filetypes '(("PDF" ".pdf"))))
					       (levels (|get-level|))
					       (classes (get-classes))
					       (class-data (mapcar (lambda (level)
								     `(,(cadr level) ,(mapcar (lambda (class)
												(cadr class))
											      (remove-if-not
											       (lambda (e) (equal (car (last e)) (car level))) classes))))
								   levels)))
					  (unless (equal "" pdf-path)
					    (export-table-to-pdf "Classes" pdf-path '("Level" "Classes") class-data)
					    (create-menubar)
					    (grid-columnconfigure *tk* 0 :weight 1) 
					    (grid-rowconfigure *tk* 0 :weight 1)
					    (when *school-info-main-frame*
					      (destroy *school-info-main-frame*))
					    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					    (grid *school-info-main-frame* 0 0)
					    (grid (make-instance 'label :master *school-info-main-frame* :text "The classes have been exported to pdf") 1 0))
					  )
					)))

(defun stream-menu (stream-menu)  
  (let ((new-menu (make-instance 'menu :master stream-menu :text "New"))
	(edit-menu (make-instance 'menu :master stream-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master stream-menu :text "Delete"))
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((new-level-menu (make-instance 'menu :master new-menu :text (cadr level)))
	     (edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (make-instance 'menubutton :master new-level-menu :text (cadr class) :command (lambda () (stream-form class)))
	  (let* ((edit-class-menu (make-instance 'menu :master edit-level-menu :text (cadr class)))
		 (delete-class-menu (make-instance 'menu :master delete-level-menu :text (cadr class)))
		 (streams (get-streams (car class))))
	    (dolist (stream streams)
	      (make-instance 'menubutton :master edit-class-menu :text (cadr stream) :command (lambda () (stream-form class stream)))
	      (make-instance 'menubutton :master delete-class-menu :text (cadr stream)
					 :command (lambda ()
						    (let ((message "The stream has been deleted."))
						      (handler-case (delete-stream (car stream))
							(sqlite-constraint-error (err)
							  (declare (ignore err))
							  (setq message "The stream can't be deleted as it has subjects, first delete them and try again.")))
						      (create-menubar)
						      (grid-columnconfigure *tk* 0 :weight 1) 
						      (grid-rowconfigure *tk* 0 :weight 1)
						      (destroy *school-info-main-frame*)
						      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
						      (grid *school-info-main-frame* 0 0)
						      (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))
						    ))))))))
  (make-instance 'menubutton :master stream-menu :text "Show streams" :command (lambda () (show-streams)))
  (make-instance 'menubutton :master stream-menu :text "Export to PDF"
		 	     :command (lambda ()
					(let* ((pdf-path (get-save-file :filetypes '(("PDF" ".pdf"))))
					       (stream-data (get-stream-data)))
					  (unless (equal "" pdf-path)
					    (export-table-to-pdf "Streams" pdf-path '("Level" "Class" "Stream") stream-data)
					    (create-menubar)
					    (grid-columnconfigure *tk* 0 :weight 1) 
					    (grid-rowconfigure *tk* 0 :weight 1)
					    (when *school-info-main-frame*
					      (destroy *school-info-main-frame*))
					    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					    (grid *school-info-main-frame* 0 0)
					    (grid (make-instance 'label :master *school-info-main-frame* :text "The streams have been exported to pdf") 1 0))
					  )
					)))

(defun get-stream-data ()
  "mapcar streams to classes to levels"
  (let ((levels (|get-level|))
	(classes (get-classes)))
    (labels ((get-level-streams (level-id)
	       (mapcar (lambda (class) (mapcar #'cadr (get-streams (car class))))
		       (get-classes level-id))))
      (mapcar (lambda (level) (list (cadr level)
				    (mapcar #'cadr (get-classes (car level)))
				    (get-level-streams (car level)))) levels)) 
    ))


(defun subject-menu (subject-menu)
  (let ((new-menu (make-instance 'menu :master subject-menu :text "New"))
	(show-menu (make-instance 'menu :master subject-menu :text "Show"))
	(edit-menu (make-instance 'menu :master subject-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master subject-menu :text "Delete")) 
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((new-level-menu (make-instance 'menu :master new-menu :text (cadr level)))
	     (edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (show-level-menu (make-instance 'menu :master show-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (let* ((new-class-menu (make-instance 'menu :master new-level-menu :text (cadr class)))
		 (edit-class-menu (make-instance 'menu :master edit-level-menu :text (cadr class)))
		 (show-class-menu (make-instance 'menu :master show-level-menu :text (cadr class)))
		 (delete-class-menu (make-instance 'menu :master delete-level-menu :text (cadr class)))
		 (streams (get-streams (car class))))
	    (dolist (stream streams)
	      (make-instance 'menubutton :master new-class-menu :text (cadr stream) :command (lambda () (subject-form class stream)))
	      (make-instance 'menubutton :master show-class-menu :text (cadr stream) :command (lambda () (show-stream-subjects stream)))
	      (let ((subjects (get-stream-subjects (car stream)))
		    (edit-stream-menu (make-instance 'menu :master edit-class-menu :text (cadr stream)))
		    (delete-stream-menu (make-instance 'menu :master delete-class-menu :text (cadr stream))))
		(dolist (subject subjects)
		  (make-instance 'menubutton :master edit-stream-menu :text (cadr subject) :command (lambda () (subject-form class stream subject)))
		  (make-instance 'menubutton :master delete-stream-menu :text (cadr subject) :command (lambda ()
													(let ((message "The subject has been deleted"))
													  (handler-case (delete-subject (car subject))
													    (sqlite-constraint-error (err)
													      (declare (ignore err))
													      (setq message "The subject has papers, first delete them and try again.")))
													  (create-menubar)
													  (grid-columnconfigure *tk* 0 :weight 1) 
													  (grid-rowconfigure *tk* 0 :weight 1)
													  (destroy *school-info-main-frame*)
													  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
													  (grid *school-info-main-frame* 0 0)
													  (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))))))))
  (make-instance 'menubutton :master subject-menu :text "Show Subjects" :command (lambda () (show-subjects)))
  (make-instance 'menubutton :master subject-menu :text "Export to PDF"))

(defun paper-menu (paper-menu)
  (let ((new-menu (make-instance 'menu :master paper-menu :text "New"))
	(edit-menu (make-instance 'menu :master paper-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master paper-menu :text "Delete")) 
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((new-level-menu (make-instance 'menu :master new-menu :text (cadr level)))
	     (edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (let* ((new-class-menu (make-instance 'menu :master new-level-menu :text (cadr class)))
		 (edit-class-menu (make-instance 'menu :master edit-level-menu :text (cadr class)))
		 (delete-class-menu (make-instance 'menu :master delete-level-menu :text (cadr class)))
		 (streams (get-streams (car class))))
	    (dolist (stream streams)
	      (let ((subjects (get-stream-subjects (car stream)))
		    (new-stream-menu (make-instance 'menu :master new-class-menu :text (cadr stream)))
		    (edit-stream-menu (make-instance 'menu :master edit-class-menu :text (cadr stream)))
		    (delete-stream-menu (make-instance 'menu :master delete-class-menu :text (cadr stream))))
		(dolist (subject subjects)
		  (make-instance 'menubutton :master new-stream-menu :text (cadr subject) :command (lambda () (paper-form class stream subject)))
		  (let ((papers (get-papers (car subject)))
			(edit-subject-menu (make-instance 'menu :master edit-stream-menu :text (cadr subject)))
			(delete-subject-menu (make-instance 'menu :master delete-stream-menu :text (cadr subject)))
			)
		    (dolist (paper papers)
		      (make-instance 'menubutton :master edit-subject-menu :text (cadr paper) :command (lambda () (paper-form class stream subject paper)))
		      (make-instance 'menubutton :master delete-subject-menu :text (cadr paper) :command (lambda ()
													   (let ((message "The paper has been deleted"))
													     (handler-case (delete-paper (car paper))
													       (sqlite-constraint-error (err)
														 (declare (ignore err))
														 (setq message "The paper has dependant data, first delete them and try again.")))
													     (create-menubar)
													     (grid-columnconfigure *tk* 0 :weight 1) 
													     (grid-rowconfigure *tk* 0 :weight 1)
													     (destroy *school-info-main-frame*)
													     (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
													     (grid *school-info-main-frame* 0 0)
													     (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))))))))))
  (make-instance 'menubutton :master paper-menu :text "Show papers" :command (lambda () (show-papers)))
  (make-instance 'menubutton :master paper-menu :text "Export to PDF"))

(defun house-menu (house-menu)
  (make-instance 'menubutton :master house-menu :text "New" :command (lambda () (house-form)))
  (let ((edit-menu (make-instance 'menu :master house-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master house-menu :text "Delete"))
	(houses (|get-house|)))
    (dolist (house houses)
      (make-instance 'menubutton :master edit-menu :text (cadr house) :command (lambda () (house-form house)))
      (make-instance 'menubutton :master delete-menu :text (cadr house)
				 :command (lambda ()
					    (let ((message-text "House has been deleted."))
					      (handler-case (|delete-house| (car house))
						(sqlite-constraint-error (err)
						  (declare (ignore err))
						  (setq message-text "House can't be deleted as it has data depending on it, first delete them and try again.")))
					      (create-menubar)
					      (grid-columnconfigure *tk* 0 :weight 1) 
					      (grid-rowconfigure *tk* 0 :weight 1)
					      (destroy *school-info-main-frame*)
					      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					      (grid *school-info-main-frame* 0 0)
					      (grid (make-instance 'label :master *school-info-main-frame* :text message-text) 1 0))))))
  (make-instance 'menubutton :master house-menu :text "Show houses" :command (lambda () (show-houses)))
  (make-instance 'menubutton :master house-menu :text "Export to PDF"
			     :command (lambda ()
					(let ((pdf-path (get-save-file :filetypes '(("PDF" ".pdf")))))
					  (export-to-pdf "Houses" pdf-path #'|get-house| #'cadr)
					  (create-menubar)
					  (grid-columnconfigure *tk* 0 :weight 1) 
					  (grid-rowconfigure *tk* 0 :weight 1)
					  (when *school-info-main-frame*
					    (destroy *school-info-main-frame*))
					  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					  (grid *school-info-main-frame* 0 0)
					  (grid (make-instance 'label :master *school-info-main-frame* :text "The houses have been exported to pdf") 1 0)
					  ))))

(defun dorm-menu (dorm-menu)
  (make-instance 'menubutton :master dorm-menu :text "New" :command (lambda () (dorm-form)))
  (let ((edit-menu (make-instance 'menu :master dorm-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master dorm-menu :text "Delete"))
	(dorms (|get-dorm|)))
    (dolist (dorm dorms)
      (make-instance 'menubutton :master edit-menu :text (cadr dorm) :command (lambda () (dorm-form dorm)))
      (make-instance 'menubutton :master delete-menu :text (cadr dorm)
				 :command (lambda ()
					    (let ((message-text "Dorm has been deleted."))
					      (handler-case (|delete-dorm| (car dorm))
						(sqlite-constraint-error (err)
						  (declare (ignore err))
						  (setq message-text "Dorm can't be deleted as it has data depending on it, first delete them and try again.")))
					      (create-menubar)
					      (grid-columnconfigure *tk* 0 :weight 1) 
					      (grid-rowconfigure *tk* 0 :weight 1)
					      (destroy *school-info-main-frame*)
					      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					      (grid *school-info-main-frame* 0 0)
					      (grid (make-instance 'label :master *school-info-main-frame* :text message-text) 1 0))))))
  (make-instance 'menubutton :master dorm-menu :text "Show dorms" :command (lambda () (show-dorms)))
  (make-instance 'menubutton :master dorm-menu :text "Export to PDF"
			     :command (lambda ()
					(let ((pdf-path (get-save-file :filetypes '(("PDF" ".pdf")))))
					  (export-to-pdf "Dormitories" pdf-path #'|get-dorm| #'cadr)
					  (create-menubar)
					  (grid-columnconfigure *tk* 0 :weight 1) 
					  (grid-rowconfigure *tk* 0 :weight 1)
					  (when *school-info-main-frame*
					    (destroy *school-info-main-frame*))
					  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					  (grid *school-info-main-frame* 0 0)
					  (grid (make-instance 'label :master *school-info-main-frame* :text "The dormitories have been exported to pdf") 1 0)
					  ))))

(defun details-menu (menu)
  (make-instance 'menubutton :master menu :text "Edit details" :command (lambda () (details-form)))
  (make-instance 'menubutton :master menu :text "Show details" :command (lambda () (show-details)))
  (make-instance 'menubutton :master menu :text "Export to PDF"
			     :command (lambda ()
					(let ((pdf-path (get-save-file :filetypes '(("PDF" ".pdf")))))
					  (unless (equal "" pdf-path)
					    (export-table-to-pdf "School details" pdf-path '("Detail" "Value") (get-school-details))
					    (create-menubar)
					    (grid-columnconfigure *tk* 0 :weight 1) 
					    (grid-rowconfigure *tk* 0 :weight 1)
					    (when *school-info-main-frame*
					      (destroy *school-info-main-frame*))
					    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					    (grid *school-info-main-frame* 0 0)
					    (grid (make-instance 'label :master *school-info-main-frame* :text "The school details have been exported to pdf.") 1 0))
					  ))))

(defun create-menubar ()
  "create a new menu bar, if an old one exists, destroy it, then recreate a new one."
  (when *menubar*
    (destroy *menubar*))
  (setq *menubar* (make-instance 'menubar))
  (let* ((details (make-instance 'menu :master *menubar* :text "School details"))
	 (level-menu (make-instance 'menu :master *menubar* :text "Levels"))
	 (class-menu (make-instance 'menu :master *menubar* :text "Classes"))
	 (stream-menu (make-instance 'menu :master *menubar* :text "Streams"))
	 (subject-menu (make-instance 'menu :master *menubar* :text "Subjects"))
	 (paper-menu (make-instance 'menu :master *menubar* :text "Papers"))
	 (house-menu (make-instance 'menu :master *menubar* :text "Houses"))
	 (dorm-menu (make-instance 'menu :master *menubar* :text "Dormitories"))
	 )
    (details-menu details)
    (level-menu level-menu)
    (class-menu class-menu)
    (stream-menu stream-menu)
    (subject-menu subject-menu)
    (paper-menu paper-menu)
    (house-menu house-menu)
    (dorm-menu dorm-menu)
    ))


(defun start ()
  "start the info application, try to create the tables, bind the error to continue execution if the tables are already present. enable foreign key support on the database"
  (conn 
    (execute-non-query db "pragma foreign_keys = on") 
    (handler-case
	(create-tables db)
      (sqlite-error (err)
	(declare (ignore err)))))
  (with-ltk ()
					; (iconbitmap #p"/home/lam/common-lisp/school/favicon.ico")
    (create-menubar)
    (minsize *tk* 800 600)
    ;; start in maximized on OSX and Windows
    (unless (equal "Linux" (software-type))
      (setf (wm-state *tk*) 'zoomed))
    (wm-title *tk* "School Info")
    ))

(defun details-form ()
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (flet ((get-detail (data key) (cadr (assoc key data :test #'string-equal))))
    (let* ((data (get-school-details))
	   (heading (make-instance 'label :master *school-info-main-frame* :text "Basic Information about the school."))
	   (name-label (make-instance 'label :master *school-info-main-frame* :text "Name"))
	   (name-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "name")))
	   (motto-label (make-instance 'label :master *school-info-main-frame* :text "Motto"))
	   (motto-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "motto")))
	   (location-label (make-instance 'label :master *school-info-main-frame* :text "Location"))
	   (location-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "location")))
	   (phone-number-label (make-instance 'label :master *school-info-main-frame* :text "Phone Number"))
	   (phone-number-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "phone_number")))
	   (pobox-label (make-instance 'label :master *school-info-main-frame* :text "P.O. Box"))
	   (pobox-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "pobox")))
	   (fax-label (make-instance 'label :master *school-info-main-frame* :text "Fax"))
	   (fax-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "fax")))
	   (email-label (make-instance 'label :master *school-info-main-frame* :text "Email"))
	   (email-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "email")))
	   (save-button (make-instance 'button :master *school-info-main-frame*
					       :text "Save School Details"
					       :command (lambda ()
							  (save-school-details (text name-entry)
									       (text motto-entry)
									       (text location-entry)
									       (text phone-number-entry)
									       (text pobox-entry)
									       (text fax-entry)
									       (text email-entry))
							  (create-menubar)
							  (destroy *school-info-main-frame*)
							  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
							  (grid *school-info-main-frame* 0 0)
							  (grid (make-instance 'label :master *school-info-main-frame* :text "The school details have been saved.") 1 0)
							  ))))
      (prepare-main-window)
      (grid heading 0 0 :padx 10 :pady 5)
      (grid  name-label 1 0 :padx 10 :pady 5)
      (grid  name-entry 1 2 :padx 10 :pady 5)
      (grid  motto-label 2 0 :padx 10 :pady 5)
      (grid  motto-entry 2 2 :padx 10 :pady 5)
      (grid  location-label 3 0 :padx 10 :pady 5)
      (grid  location-entry 3 2 :padx 10 :pady 5)
      (grid  phone-number-label 4 0 :padx 10 :pady 5)
      (grid  phone-number-entry 4 2 :padx 10 :pady 5)
      (grid  pobox-label 5 0 :padx 10 :pady 5)
      (grid  pobox-entry 5 2 :padx 10 :pady 5)
      (grid  fax-label 6 0 :padx 10 :pady 5)
      (grid  fax-entry 6 2 :padx 10 :pady 5)
      (grid  email-label 7 0 :padx 10 :pady 5)
      (grid  email-entry 7 2 :padx 10 :pady 5)
      (grid save-button 8 2 :pady 10))))

(defun show-details ()
  "this displays the details of the school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (flet ((get-detail (data key) (cadr (assoc key data :test #'string-equal))))
    (let* ((data (get-school-details))
	   (heading (make-instance 'label :master *school-info-main-frame* :text "Basic Information about the school."))
	   (name-label (make-instance 'label :master *school-info-main-frame* :text "Name"))
	   (name-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "name")))
	   (motto-label (make-instance 'label :master *school-info-main-frame* :text "Motto"))
	   (motto-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "motto")))
	   (location-label (make-instance 'label :master *school-info-main-frame* :text "Location"))
	   (location-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "location")))
	   (phone-number-label (make-instance 'label :master *school-info-main-frame* :text "Phone Number"))
	   (phone-number-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "phone_number")))
	   (pobox-label (make-instance 'label :master *school-info-main-frame* :text "P.O. Box"))
	   (pobox-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "pobox")))
	   (fax-label (make-instance 'label :master *school-info-main-frame* :text "Fax"))
	   (fax-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "fax")))
	   (email-label (make-instance 'label :master *school-info-main-frame* :text "Email"))
	   (email-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "email"))))
      (prepare-main-window)
      (grid heading 0 0 :padx 10 :pady 5)
      (grid name-label 1 0 :padx 10 :pady 5)
      (grid name-data 1 2 :padx 10 :pady 5)
      (grid motto-label 2 0 :padx 10 :pady 5)
      (grid motto-data 2 2 :padx 10 :pady 5)
      (grid location-label 3 0 :padx 10 :pady 5)
      (grid location-data 3 2 :padx 10 :pady 5)
      (grid phone-number-label 4 0 :padx 10 :pady 5)
      (grid phone-number-data 4 2 :padx 10 :pady 5)
      (grid pobox-label 5 0 :padx 10 :pady 5)
      (grid pobox-data 5 2 :padx 10 :pady 5)
      (grid fax-label 6 0 :padx 10 :pady 5)
      (grid fax-data 6 2 :padx 10 :pady 5)
      (grid email-label 7 0 :padx 10 :pady 5)
      (grid email-data 7 2 :padx 10 :pady 5))))


(defun level-form (&optional level)
  "collect and process data about levels
   (= level (cons id level))"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let* ((index 1)
	 (level-entries ()) ; to collect the level entries displayed on the page
	 (level-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of levels"))
	 (level-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))
	 (level-label (make-instance 'label :master *school-info-main-frame* :text "Enter Level Name"))
	 (level-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr level)))
	 (save-button (make-instance 'button :master *school-info-main-frame*
					     :text "Save Level(s)" :command (let ((message "The level(s) has been saved")) 
									      (lambda ()
										(if level
										    (|update-level| (car level) (text level-entry))
										    ;; iterate over the level entries saving their values.
										    (dolist (new-level level-entries)
										      (if (string-equal "" (text (cdr new-level)))
											  (setq message "An empty level can't be saved")
											  (handler-case (|save-level| (text (cdr new-level)))
											    (sqlite-constraint-error (err)
											      (declare (ignore err))
											      (setq message (format nil "Not saved. A level named ~a already exists" (text (cdr new-level)))))))))
										(create-menubar)
										(destroy *school-info-main-frame*)
										(setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
										(grid *school-info-main-frame* 0 0)
										(grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	 (level-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
						     :command (lambda ()
								(let ((number-of-levels (parse-integer (text level-number-entry))))
								  (cond ((eq 0 number-of-levels) ())
									((< number-of-levels (length level-entries))
									 (dolist (new-level (subseq level-entries 0 (- (length level-entries) number-of-levels)))
									   (destroy (car new-level))
									   (destroy (cdr new-level))
									   (setq index (- index 1))
					; run this code everytime, because you need to remove the unwanted entries from the entries list
									   (setq level-entries (cdr level-entries))
									   )
									 (grid save-button index 1 :pady 10)
									 (setq index (+ 1 index)))
									(t
									 (loop for i from 1 to (- number-of-levels (length level-entries)) ; subtract the entries already present
									       do (let ((new-level-label (make-instance 'label :master *school-info-main-frame* :text "Enter Level Name"))
											(new-level-entry (make-instance 'entry :master *school-info-main-frame*)))
										    (setq level-entries (cons (cons new-level-label new-level-entry) level-entries))
										    (grid new-level-label index 0 :padx 10 :pady 5)
										    (grid new-level-entry index 1 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
										    (setq index (+ 1 index)))
									       finally (grid save-button index 1 :pady 10) ; change the position of the save-button
										       (setq index (+ 1 index))))))))))
    (prepare-main-window)
    ;; show these when adding a new level
    (unless level
      (grid level-number-label 1 0 :padx 10 :pady 5)
      (grid level-number-entry 1 1 :padx 10 :pady 5)
      (grid level-number-button 1 2 :padx 10 :pady 5))
    (grid  level-label 2 0 :padx 10 :pady 5)
    (grid level-entry 2 1 :padx 10 :pady 5 :sticky "nsew" :columnspan 2)
    (setq level-entries (cons (cons level-label level-entry) level-entries))
    (grid save-button 3 1 :pady 10)
;;; set the index to be used when adding the extra level entries
    (setq index 4)))

(defun show-levels ()
  "Show levels of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Levels")
  (grid (make-instance 'label :master *school-info-main-frame* :text "Levels") 0 0)
  (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :sticky "nsew")
  (let ((index 2)
	(levels (|get-level|)))
    (if (eq 0 (length levels))
	(grid (make-instance 'label :master *school-info-main-frame* :text "No level has been added yet.") 1 0 :padx 10 :pady 5)
	(dolist (level levels)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) index 0)
	  (setq index (+ index 1))))))

(defun house-form (&optional house)
  "collect and process data about houses
   (= house (cons id house))"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let* ((index 1)
	 (house-entries ()) ; to collect the house entries displayed on the page
	 (house-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of houses"))
	 (house-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))
	 (house-label (make-instance 'label :master *school-info-main-frame* :text "Enter House Name"))
	 (house-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr house)))
	 (save-button (make-instance 'button :master *school-info-main-frame*
					     :text "Save House(s)" :command (let ((message "The house(s) has been saved"))
									      (lambda ()
										(if house
										    (|update-house| (car house) (text house-entry))
										    (dolist (new-house house-entries)
										      (let ((house-name (text (cdr new-house))))
											(if (string-equal "" house-name)
											    (setq message "House can't be left empty.")
											    (handler-case (|save-house| house-name)
											      (sqlite-constraint-error (err)
												(declare (ignore err))
												(setq message (format nil "Not saved. A house named ~a already exists" house-name))))))))
										(create-menubar)
										(destroy *school-info-main-frame*)
										(setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
										(grid *school-info-main-frame* 0 0)
										(grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	 (house-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
						     :command (lambda ()
								(let ((number-of-houses (parse-integer (text house-number-entry))))
								  (cond ((eq 0 number-of-houses) ())
									((< number-of-houses (length house-entries))
									 (dolist (new-house (subseq house-entries 0 (- (length house-entries) number-of-houses)))
									   (destroy (car new-house))
									   (destroy (cdr new-house))
									   (setq index (- index 1))
									   (setq house-entries (cdr house-entries)))
									 (grid save-button index 1 :pady 10)
									 (setq index (+ 1 index)))
									(t
									 (loop for i from 1 to (- number-of-houses (length house-entries)) ;subtract those already present
									       do (let ((new-house-label (make-instance 'label :master *school-info-main-frame* :text "Enter House Name"))
											(new-house-entry (make-instance 'entry :master *school-info-main-frame*)))
										    (setq house-entries (cons (cons new-house-label new-house-entry) house-entries))
										    (grid new-house-label index 0 :padx 10 :pady 5)
										    (grid new-house-entry index 1 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
										    (setq index (+ 1 index)))
									       finally (grid save-button index 1 :pady 10) ; change the position of the save-button
										       (setq index (+ 1 index))))))))))
    (prepare-main-window)
    ;; show these when adding a new house
    (unless house
      (grid house-number-label 1 0 :padx 10 :pady 5)
      (grid house-number-entry 1 1 :padx 10 :pady 5)
      (grid house-number-button 1 2 :padx 10 :pady 5))
    (setq house-entries (cons (cons house-label house-entry) house-entries))
    (grid  house-label 2 0 :padx 10 :pady 5)
    (grid house-entry 2 1 :padx 10 :pady 5 :sticky "nsew" :columnspan 2)
    (grid save-button 3 2 :pady 10)
    (setq index 4)))

(defun show-houses ()
  "Show houses of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Houses")
  (grid (make-instance 'label :master *school-info-main-frame* :text "Houses") 0 0)
  (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :sticky "nsew")
  (let ((index 2)
	(houses (|get-house|)))
    (if (eq 0 (length houses))
	(grid (make-instance 'label :master *school-info-main-frame* :text "No house has been added yet") 1 0 :padx 10 :pady 5)
	(dolist (house houses)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr house)) index 0)
	  (setq index (+ index 1))))))

(defun dorm-form (&optional dorm)
  "collect and process data about dorms
   (= dorm (cons id dorm))"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let* ((index 1)
	 (dorm-entries ()) ; to collect the dorm entries displayed on the page
	 (dorm-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of dorms"))
	 (dorm-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))	
	 (dorm-label (make-instance 'label :master *school-info-main-frame* :text "Enter Dorm Name"))
	 (dorm-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr dorm)))
	 (save-button (make-instance 'button :master *school-info-main-frame*
					     :text "Save Dorm(s)" :command (let ((message "The dorm(s) has been saved"))
									     (lambda ()
									       (if dorm
										   (|update-dorm| (car dorm) (text dorm-entry))
										   (dolist (new-dorm dorm-entries)
										     (let ((dorm-text (text (cdr new-dorm))))
										       (if (string-equal "" dorm-text)
											   (setq message "A dorm can't be empty")
											   (handler-case (|save-dorm| dorm-text)
											     (sqlite-constraint-error (err)
											       (declare (ignore err))
											       (setq message (format nil "Not saved. The dorm named ~a already exists" dorm-text))))))))
									       (create-menubar)
									       (destroy *school-info-main-frame*)
									       (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
									       (grid *school-info-main-frame* 0 0)
									       (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	 (dorm-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
						    :command (lambda ()
							       (let ((number-of-dorms (parse-integer (text dorm-number-entry))))
								 (cond ((eq 0 number-of-dorms) ())
								       ((< number-of-dorms (length dorm-entries))
									(dolist (new-dorm (subseq dorm-entries 0 (- (length dorm-entries) number-of-dorms)))
									  (destroy (car new-dorm))
									  (destroy (cdr new-dorm))
									  (setq index (- index 1))
									  (setq dorm-entries (cdr dorm-entries)))
									(grid save-button index 1 :pady 10)
									(setq index (+ 1 index)))
								       (t
									(loop for i from 1 to (- number-of-dorms (length dorm-entries))
									      do (let ((new-dorm-label (make-instance 'label :master *school-info-main-frame* :text "Enter Dorm Name"))
										       (new-dorm-entry (make-instance 'entry :master *school-info-main-frame*)))
										   (setq dorm-entries (cons (cons new-dorm-label new-dorm-entry) dorm-entries))
										   (grid new-dorm-label index 0 :padx 10 :pady 5)
										   (grid new-dorm-entry index 1 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
										   (setq index (+ 1 index)))
									      finally (grid save-button index 1 :pady 10) ; change the position of the save-button
										      (setq index (+ 1 index))))))))))
    (prepare-main-window)
    ;; show these when adding a new dorm
    (unless dorm
      (grid dorm-number-label 1 0 :padx 10 :pady 5)
      (grid dorm-number-entry 1 1 :padx 10 :pady 5)
      (grid dorm-number-button 1 2 :padx 10 :pady 5))
    (setq dorm-entries (cons (cons dorm-label dorm-entry) dorm-entries))
    (grid  dorm-label 2 0 :padx 10 :pady 5)
    (grid dorm-entry 2 1 :padx 10 :pady 5 :sticky "nsew" :columnspan 5)
    (grid save-button 3 1 :pady 10)
    (setq index 4)))

(defun show-dorms ()
  "Show dorms of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Dormitories")
  (grid (make-instance 'label :master *school-info-main-frame* :text "Dormitories") 0 0)
  (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :sticky "nsew")
  (let ((index 2)
	(dorms (|get-dorm|)))
    (if (eq 0 (length dorms))
	(grid (make-instance 'label :master *school-info-main-frame* :text "No dorm has been added yet.") 1 0 :padx 10 :pady 5)
	(dolist (dorm dorms)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr dorm)) index 0)
	  (setq index (+ index 1))))))

(defun class-form (&optional level class)
  "collect and process data about classes
   the form has a combobox list of levels to choose from, shows an error if no levels are present."
  (let ((levels (|get-level|)))   
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (if levels
	(let* ((index 1)
	       (class-entries ()) ; to collect the class entries displayed on the page
	       (class-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of classes"))
	       (class-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))	
	       (level-label (make-instance 'label :master *school-info-main-frame* :text "Select Level"))
	       (level-combobox (make-instance 'combobox :text (if level (cadr level)
								  (cadar levels)) :master *school-info-main-frame* :values (mapcar (lambda (x) (cadr x)) levels)))
	       (class-label (make-instance 'label :master *school-info-main-frame* :text "Enter Class Name"))
	       (class-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr class)))
	       (save-button (make-instance 'button :master *school-info-main-frame*
						   :text "Save Class(es)" :command (let ((message "The class(es) has been saved"))
										     (lambda ()
										       (if class
											   (update-class (car class) (text class-entry))
											   (dolist (new-class class-entries)
											     (let ((class-text (text (cdr new-class))))
											       (if (string-equal "" class-text)
												   (setq message "Class name can't be empty")
												   (handler-case 
												       (save-class (|get-level-id| (text level-combobox)) class-text)
												     (sqlite-constraint-error (err)
												       (declare (ignore err))
												       (setq message (format nil "A class with name ~a already exists" class-text))))))))
										       (create-menubar)
										       (destroy *school-info-main-frame*)
										       (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
										       (grid *school-info-main-frame* 0 0)
										       (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	       (class-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
							   :command (lambda ()
								      (let ((number-of-classes (parse-integer (text class-number-entry))))
									(cond ((eq 0 number-of-classes) ())
									      ((< number-of-classes (length class-entries))
									       (dolist (new-class (subseq class-entries 0 (- (length class-entries) number-of-classes)))
										 (destroy (car new-class))
										 (destroy (cdr new-class))
										 (setq index (- index 1))
										 (setq class-entries (cdr class-entries)))
									       (grid save-button index 1 :pady 10)
									       (setq index (+ 1 index)))
									      (t
									       (loop for i from 1 to (- number-of-classes (length class-entries))
										     do (let ((new-class-label (make-instance 'label :master *school-info-main-frame* :text "Enter Class Name"))
											      (new-class-entry (make-instance 'entry :master *school-info-main-frame*)))
											  (setq class-entries (cons (cons new-class-label new-class-entry) class-entries))
											  (grid new-class-label index 0 :padx 10 :pady 5)
											  (grid new-class-entry index 1 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
											  (setq index (+ 1 index)))
										     finally (grid save-button index 1 :pady 10) ; change the position of the save-button
											     (setq index (+ 1 index))))))))))
	  (prepare-main-window)
	  ;; show these when adding a new class
	  (unless class
	    (grid class-number-label 1 0 :padx 10 :pady 5)
	    (grid class-number-entry 1 1 :padx 10 :pady 5)
	    (grid class-number-button 1 2 :padx 10 :pady 5))
          (setq class-entries (cons (cons class-label class-entry) class-entries))
	  (grid level-label 2 0 :padx 10 :pady 5)
	  (grid level-combobox 2 1 :padx 10 :pady 5)
	  (grid class-label 3 0 :padx 10 :pady 5)
	  (grid class-entry 3 1 :padx 10 :pady 5 :sticky "ew" :columnspan 2)
	  (grid save-button 4 1 :pady 10)
	  (setq index 5))
	(let ((error-text (make-instance 'label :master *school-info-main-frame* :text "There are no levels, first create a level to continue.")))
	  (prepare-main-window)
	  (grid error-text 0 0 :padx 10 :pady 5))
	)))

(defun show-classes ()
  "Show classes of levels of a school.
use labels to show the data because we have failed to make trees work with text that has spaces.
display the levels and classes in a grid, use x-pos and y-pos to control the location in the grid"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Classes")
  ;; make table headings
  (grid (make-instance 'label :master *school-info-main-frame* :text "Level") 0 0)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Classes") 0 1)
      (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :sticky "nsew" :columnspan 2)
  (let* ((levels (|get-level|))
	 (r 2) ; start from row 2
	 )
    (dolist (level levels)
      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) r 0) ; all levels go into column 0 
      (let ((classes (get-classes (car level))))
	(dolist (class classes)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) r 1); all classes go into column 1
	  (setq r (+ 1 r))
	  	  (unless (equal (car (last classes)) class)
	    (grid (make-instance 'separator :master *school-info-main-frame*) r 1 :sticky "nsew" :columnspan 2))
	  (setq r (+ r 1))))
      (unless (equal (car (last levels)) level)
	(grid (make-instance 'separator :master *school-info-main-frame*) r 0 :sticky "nsew" :columnspan 2))
      (setq r (+ r 1)))
    (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 1 :sticky "nsw" :rowspan r)))

(defun stream-form (class-data &optional stream-data)
  "collect and process data about streams. includes a combobox for selecting a class, every stream should be part of a class."
  (let ((classes (get-classes))
	(class-text (cadr class-data))
	(class-id (car class-data))
	(stream-text (cadr stream-data))
	(stream-id (car stream-data)))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (if classes
	(let* ((index 1)
	       (stream-entries ()) ; to collect the stream entries displayed on the page
	       (stream-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of streams"))
	       (stream-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))	
	       
	       (class-label (make-instance 'label :master *school-info-main-frame* :text "Choose Class Name"))
	       (class-combobox (make-instance 'entry :text class-text :master *school-info-main-frame* :state :disabled))
	       (stream-label (make-instance 'label :master *school-info-main-frame* :text "Enter Stream Name"))
	       (stream-entry (make-instance 'entry :master *school-info-main-frame* :text stream-text))
	       (save-button (make-instance 'button :master *school-info-main-frame*
						   :text "Save Stream(s)"
						   :command (let ((message "The stream(s) has been saved"))
							      (lambda ()
								(if stream-data
								    (update-stream stream-id (text stream-entry))
								    (dolist (new-stream stream-entries)
								      (let ((stream-text (text (cdr new-stream))))
									(if (string-equal "" stream-text)
									    (setq message "A stream can't be empty")
									    (handler-case (save-stream class-id stream-text)
									      (sqlite-constraint-error (err)
										(declare (ignore err))
										(setq message (format nil "Not saved. The stream named ~a already exists" stream-text))))))))
								(create-menubar)
								(destroy *school-info-main-frame*)
								(setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
								(grid *school-info-main-frame* 0 0)
								(grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	       (stream-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
							    :command (lambda ()
								       (let ((number-of-streams (parse-integer (text stream-number-entry))))
									 (cond ((eq 0 number-of-streams) ())
									       ((< number-of-streams (length stream-entries))
										(dolist (new-stream (subseq stream-entries 0 (- (length stream-entries) number-of-streams)))
										  (destroy (car new-stream))
										  (destroy (cdr new-stream))
										  (setq index (- index 1))
										  (setq stream-entries (cdr stream-entries)))
										(grid save-button index 1 :pady 10)
										(setq index (+ 1 index)))
									       (t
										(loop for i from 1 to (- number-of-streams (length stream-entries))
										      do (let ((new-stream-label (make-instance 'label :master *school-info-main-frame* :text "Enter Stream Name"))
											       (new-stream-entry (make-instance 'entry :master *school-info-main-frame*)))
											   (setq stream-entries (cons (cons new-stream-label new-stream-entry) stream-entries))
											   (grid new-stream-label index 0 :padx 10 :pady 5)
											   (grid new-stream-entry index 1 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
											   (setq index (+ 1 index)))
										      finally (grid save-button index 1 :pady 10) ; change the position of the save-button
											      (setq index (+ 1 index))))))))))
	  (prepare-main-window)
	  ;; show these when adding a new stream
	  (unless stream-data
	    (grid stream-number-label 1 0 :padx 10 :pady 5)
	    (grid stream-number-entry 1 1 :padx 10 :pady 5)
	    (grid stream-number-button 1 2 :padx 10 :pady 5))
          (setq stream-entries (cons (cons stream-label stream-entry) stream-entries))
	  (grid class-label 2 0 :padx 10 :pady 5)
	  (grid class-combobox 2 1 :padx 10 :pady 5 :sticky "ew" :columnspan 2)
	  (grid stream-label 3 0 :padx 10 :pady 5)
	  (grid stream-entry 3 1 :padx 10 :pady 5 :sticky "ew" :columnspan 2)
	  (grid save-button 4 1 :pady 10)
	  (setq index 5))
	(let ((error-text (make-instance 'label :master *school-info-main-frame* :text "There are no classes, first create a class to add stream to.")))
	  (prepare-main-window)
	  (grid error-text 0 0 :padx 10 :pady 5))
	)))

(defun show-streams ()
  "Show classes of levels of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Streams")
  ;; show table headings
  (grid (make-instance 'label :master *school-info-main-frame* :text "Level") 0 0)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Classes") 0 1)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Streams") 0 2)
  (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :columnspan 3 :sticky "nsew")
  (let ((r 2)
	(levels (|get-level|)))
    (dolist (level levels)
      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) r 0) ; all levels go into column 0 
      (let ((classes (get-classes (car level))))
	(dolist (class classes)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) r 1); all classes go into column 1
	  (let ((streams (get-streams (car class))))
	    (dolist (stream streams)
	      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr stream)) r 2)
	      (setq r (+ 1 r))
	      (unless (equal (car (last streams)) stream)
		(grid (make-instance 'separator :master *school-info-main-frame*) r 2 :sticky "nsew" :columnspan 1))
	      (setq r (+ 1 r))))
	  (setq r (+ 1 r))
	  (unless (equal (car (last classes)) class)
	    (grid (make-instance 'separator :master *school-info-main-frame*) r 1 :sticky "nsew" :columnspan 2))
	  (setq r (+ r 1))))
      (unless (equal (car (last levels)) level)
	(grid (make-instance 'separator :master *school-info-main-frame*) r 0 :sticky "nsew" :columnspan 3))
      (setq r (+ r 1)))
        (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 1 :sticky "nsw" :rowspan r)
       (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 2 :sticky "nsw" :rowspan r)
    ))

(defun subject-form (class-data stream-data &optional subject-data)
  "create a new subject; (= stream-data (cons stream stream_id class_id))
   (= subject-data (cons subject_id subject"
  (let ((class (cadr class-data))
	(stream (cadr stream-data))
	(stream-id (car stream-data))
	(subject-name (cadr subject-data))
	(subject-id (car subject-data))
	(subject-code (cadddr subject-data)))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (let* ((index 1)
	   (subject-entries ()) ; to collect the subject entries displayed on the page
	   (subject-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of subjects"))
	   (subject-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))	
	   (class-label (make-instance 'label :master *school-info-main-frame* :text "Class"))
	   (class-entry (make-instance 'entry :master *school-info-main-frame* :text class :state :disabled))
	   (stream-label (make-instance 'label :master *school-info-main-frame* :text "Stream"))
	   (stream-entry (make-instance 'entry :master *school-info-main-frame* :text stream :state :disabled))
	   (subject-label (make-instance 'label :master *school-info-main-frame* :text "Subject Name"))
	   (subject-entry (make-instance 'entry :master *school-info-main-frame* :text subject-name))
	   (subject-code-label (make-instance 'label :master *school-info-main-frame* :text "Subject Code"))
	   (subject-code-entry (make-instance 'entry :master *school-info-main-frame* :text subject-code))
	   (save-button (make-instance 'button :master *school-info-main-frame*
					       :text "Save Subject(s)"
					       :command (let ((message "The subject(s) has been saved."))
							  (lambda ()
							    (if subject-name
								(update-subject subject-id (text subject-entry) (text subject-code-entry))
								(dolist (new-subject subject-entries)
								  (let ((subject-text (text (cadr new-subject)))
									(subject-code (text (cadddr new-subject))))
								    (if (string-equal "" subject-text)
									(setq message "Subject name can't be empty.")
									(save-subject stream-id subject-text subject-code))))
								)
							    (create-menubar)
							    (destroy *school-info-main-frame*)
							    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
							    (grid *school-info-main-frame* 0 0)
							    (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	   (subject-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
							 :command (lambda ()
								    (let ((number-of-subjects (parse-integer (text subject-number-entry))))
								      (cond ((eq 0 number-of-subjects) ())
									    ((< number-of-subjects (length subject-entries))
									     (dolist (new-subject (subseq subject-entries 0 (- (length subject-entries) number-of-subjects)))
									       (dolist (slave new-subject)
										 (destroy slave))
									       (setq index (- index 1))
									       (setq subject-entries (cdr subject-entries)))
									     (grid save-button index 1 :pady 10)
									     (setq index (+ 1 index)))
									    (t
									     (loop for i from 1 to (- number-of-subjects (length subject-entries))
										   do (let ((new-subject-label (make-instance 'label :master *school-info-main-frame* :text "Subject Name"))
											    (new-subject-entry (make-instance 'entry :master *school-info-main-frame*))
											    (new-subject-code-label (make-instance 'label :master *school-info-main-frame* :text "Subject Code"))
											    (new-subject-code-entry (make-instance 'entry :master *school-info-main-frame*)))
											(setq subject-entries (cons (list new-subject-label new-subject-entry new-subject-code-label new-subject-code-entry) subject-entries))
											(grid new-subject-label index 0 :padx 10 :pady 5)
											(grid new-subject-entry index 1 :sticky "ew" :padx 10 :pady 5)
											(grid new-subject-code-label index 2 :padx 10 :pady 5)
											(grid new-subject-code-entry index 3 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
											(setq index (+ 1 index)))
										   finally (grid save-button index 1 :pady 10) ; change the position of the save-button
											   (setq index (+ 1 index)))))))))
	   )
      (prepare-main-window)
      ;; show these when adding a new subject
      (unless subject-data
	(grid subject-number-label 1 0 :padx 10 :pady 5)
	(grid subject-number-entry 1 1 :padx 10 :pady 5)
	(grid subject-number-button 1 2 :padx 10 :pady 5))
      (setq subject-entries (cons (list subject-label subject-entry subject-code-label subject-code-entry) subject-entries))
      (grid class-label 2 0 :padx 10 :pady 5)
      (grid class-entry 2 1 :padx 10 :pady 5)
      (grid stream-label 3 0 :padx 10 :pady 5)
      (grid stream-entry 3 1 :padx 10 :pady 5)
      (grid subject-label 4 0 :padx 10 :pady 5)
      (grid subject-entry 4 1 :padx 10 :pady 5 :sticky "nsew")
      (grid subject-code-label 4 2 :padx 10 :pady 5)
      (grid subject-code-entry 4 3 :padx 10 :pady 5 :sticky "nsew" :columnspan 2)
      (grid save-button 5 1 :pady 10)
      (setq index 6))))

(defun show-subjects ()
  "Show subjects of streams of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Subjects")
  ;; show table headings
  (grid (make-instance 'label :master *school-info-main-frame* :text "Level") 0 0)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Classes") 0 1)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Streams") 0 2)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Subjects") 0 3)
  (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :columnspan 4 :sticky "nsew")
  (let ((r 2)
	(levels (|get-level|)))
    (dolist (level levels)
      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) r 0) ; all levels go into column 0 
      (let ((classes (get-classes (car level))))
	(dolist (class classes)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) r 1); all classes go into column 1
	  (let ((streams (get-streams (car class))))
	    (dolist (stream streams)
	      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr stream)) r 2)
	      (let ((subjects (get-stream-subjects (car stream))))
		(dolist (subject subjects)
		  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr subject)) r 3)
		  (setq r (+ 1 r))
		  (unless (equal (car (last subjects)) subject)
		    (grid (make-instance 'separator :master *school-info-main-frame*) r 3 :sticky "nsew" :columnspan 1))
		  (setq r (+ 1 r))))
	      (setq r (+ 1 r))
	      (unless (equal (car (last streams)) stream)
		(grid (make-instance 'separator :master *school-info-main-frame*) r 2 :sticky "nsew" :columnspan 2))
	      (setq r (+ 1 r))))
	  (setq r (+ 1 r))
	  (unless (equal (car (last classes)) class)
	    (grid (make-instance 'separator :master *school-info-main-frame*) r 1 :sticky "nsew" :columnspan 3))
	  (setq r (+ r 1))))
      (unless (equal (car (last levels)) level)
	(grid (make-instance 'separator :master *school-info-main-frame*) r 0 :sticky "nsew" :columnspan 4))
      (setq r (+ r 1)))
            (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 1 :sticky "nsw" :rowspan r)
       (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 2 :sticky "nsw" :rowspan r)
       (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 3 :sticky "nsw" :rowspan r)))

(defun paper-form (class-data stream-data subject-data &optional paper-data)
  "create a new paper; (= paper-data (cons paper-id paper))
   (= subject (cons id subject))"
  (let ((subject-id (car subject-data))
	(subject-name (cadr subject-data))
	(paper-name (cadr paper-data))
	(paper-id (car paper-data)))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (let* ((index 1)
	   (paper-entries ()) ; to collect the paper entries displayed on the page
	   (paper-number-label (make-instance 'label :master *school-info-main-frame* :text "Enter number of papers"))
	   (paper-number-entry (make-instance 'entry :master *school-info-main-frame* :text "1"))
	   (class-label (make-instance 'label :master *school-info-main-frame* :text "Class"))
	   (class-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr class-data) :state :disabled))
	   (stream-label (make-instance 'label :master *school-info-main-frame* :text "Stream"))
	   (stream-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr stream-data) :state :disabled))
	   (subject-label (make-instance 'label :master *school-info-main-frame* :text "Subject"))
	   (subject-entry (make-instance 'entry :master *school-info-main-frame* :text subject-name :state :disabled))
	   (paper-label (make-instance 'label :master *school-info-main-frame* :text "Paper Name"))
	   (paper-entry (make-instance 'entry :master *school-info-main-frame* :text paper-name))
	   (paper-code-label (make-instance 'label :master *school-info-main-frame* :text "Paper Code"))
	   (paper-code-entry (make-instance 'entry :master *school-info-main-frame* :text paper-name))
	   (save-button (make-instance 'button :master *school-info-main-frame*
					       :text "Save Paper(s)"
					       :command (let ((message "The paper(s) has been saved."))
							  (lambda ()
							    (if paper-data
								(update-paper paper-id (text paper-entry) (text paper-code-entry))
								(dolist (new-paper paper-entries)
								  (let ((paper-text (text (cadr new-paper)))
									(paper-code (text (cadddr new-paper))))
								    (if (string-equal "" paper-text)
									(setq message "Paper name can't be empty")
									(save-paper subject-id paper-text paper-code))))
								)
							    (create-menubar)
							    (destroy *school-info-main-frame*)
							    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
							    (grid *school-info-main-frame* 0 0)
							    (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0)))))
	   (paper-number-button (make-instance 'button :master *school-info-main-frame* :text "Change number"
						       :command (lambda ()
								  (let ((number-of-papers (parse-integer (text paper-number-entry))))
								    (cond ((eq 0 number-of-papers) ())
									  ((< number-of-papers (length paper-entries))
									   (dolist (new-paper (subseq paper-entries 0 (- (length paper-entries) number-of-papers)))
									     (dolist (new-widget new-paper)
									       (destroy new-widget))
									     (setq index (- index 1))
									     (setq paper-entries (cdr paper-entries)))
									   (grid save-button index 1 :pady 10)
									   (setq index (+ 1 index)))
									  (t
									   (loop for i from 1 to (- number-of-papers (length paper-entries))
										 do (let ((new-paper-label (make-instance 'label :master *school-info-main-frame* :text "Paper Name"))
											  (new-paper-entry (make-instance 'entry :master *school-info-main-frame*))
											  (new-paper-code-label (make-instance 'label :master *school-info-main-frame* :text "Paper Code"))
											  (new-paper-code-entry (make-instance 'entry :master *school-info-main-frame*)))
										      (setq paper-entries (cons (list new-paper-label new-paper-entry new-paper-code-label new-paper-code-entry) paper-entries))
										      (grid new-paper-label index 0 :padx 10 :pady 5)
										      (grid new-paper-entry index 1 :sticky "ew" :padx 10 :pady 5)
										      (grid new-paper-code-label index 2 :padx 10 :pady 5)
										      (grid new-paper-code-entry index 3 :sticky "ew" :columnspan 2 :padx 10 :pady 5)
										      (setq index (+ 1 index)))
										 finally (grid save-button index 1 :pady 10) ; change the position of the save-button
											 (setq index (+ 1 index)))))))))
	   )
      (prepare-main-window)
      ;; show these when adding a new paper
      (unless paper-data
	(grid paper-number-label 1 0 :padx 10 :pady 5)
	(grid paper-number-entry 1 1 :padx 10 :pady 5)
	(grid paper-number-button 1 2 :padx 10 :pady 5))
      (setq paper-entries (cons (list paper-label paper-entry paper-code-label paper-code-entry) paper-entries))
      (grid class-label 2 0 :padx 10 :pady 5)
      (grid class-entry 2 1 :padx 10 :pady 5 :sticky "ew" :columnspan 2)
      (grid stream-label 3 0 :padx 10 :pady 5)
      (grid stream-entry 3 1 :padx 10 :pady 5 :sticky "ew" :columnspan 2)
      (grid subject-label 4 0 :padx 10 :pady 5)
      (grid subject-entry 4 1 :padx 10 :pady 5 :sticky "ew" :columnspan 2)
      (grid paper-label 5 0 :padx 10 :pady 5)
      (grid paper-entry 5 1 :padx 10 :pady 5 :sticky "ew")
      (grid paper-code-label 5 2 :padx 10 :pady 5)
      (grid paper-code-entry 5 3 :padx 10 :pady 5 :sticky "ew")
      (grid save-button 6 1 :pady 10)
      (setq index 7))
    ))

(defun show-papers ()
  "Show papers of a subject of a stream"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (wm-title *tk* "School Info - Subject Papers")
  ;; show table headings
  (grid (make-instance 'label :master *school-info-main-frame* :text "Level") 0 0)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Classes") 0 1)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Streams") 0 2)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Subjects") 0 3)
  (grid (make-instance 'label :master *school-info-main-frame* :text "Papers") 0 4)
  (grid (make-instance 'separator :master *school-info-main-frame*) 1 0 :columnspan 5 :sticky "nsew")
  (let ((r 2)
	(levels (|get-level|)))
    (dolist (level levels)
      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) r 0) ; all levels go into column 0 
      (let ((classes (get-classes (car level))))
	(dolist (class classes)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) r 1); all classes go into column 1
	  (let ((streams (get-streams (car class))))
	    (dolist (stream streams)
	      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr stream)) r 2)
	      (let ((subjects (get-stream-subjects (car stream))))
		(dolist (subject subjects)
		  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr subject)) r 3)
		  (let ((papers (get-papers (car subject))))
		    (dolist (paper papers)
		      (grid (make-instance 'label :master *school-info-main-frame* :text (cadr paper)) r 4)
		      (setq r (+ 1 r))
		      (unless (equal (car (last papers)) paper)
			(grid (make-instance 'separator :master *school-info-main-frame*) r 4 :sticky "nsew" :columnspan 1))
		      (setq r (+ 1 r))))
		  (setq r (+ 1 r))
		  (unless (equal (car (last subjects)) subject)
		    (grid (make-instance 'separator :master *school-info-main-frame*) r 3 :sticky "nsew" :columnspan 2))
		  (setq r (+ 1 r))))
	      (setq r (+ 1 r))
	      (unless (equal (car (last streams)) stream)
		(grid (make-instance 'separator :master *school-info-main-frame*) r 2 :sticky "nsew" :columnspan 3))
	      (setq r (+ 1 r))))
	  (setq r (+ 1 r))
	  (unless (equal (car (last classes)) class)
	    (grid (make-instance 'separator :master *school-info-main-frame*) r 1 :sticky "nsew" :columnspan 4))
	  (setq r (+ r 1))))
      (unless (equal (car (last levels)) level)
	(grid (make-instance 'separator :master *school-info-main-frame*) r 0 :sticky "nsew" :columnspan 5))
      (setq r (+ r 1)))
                (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 1 :sticky "nsw" :rowspan r)
       (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 2 :sticky "nsw" :rowspan r)
       (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 3 :sticky "nsw" :rowspan r)
       (grid (make-instance 'separator :master *school-info-main-frame* :orientation "vertical") 0 4 :sticky "nsw" :rowspan r)))

(defun show-stream-subjects (stream-data)
  "get and display all subjects for a particular stream"
  (let ((stream-subjects (get-stream-subjects (car stream-data))))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (if stream-subjects
	(let* ((subjects-label (make-instance 'label :master *school-info-main-frame* :text (format nil "Subjects for ~a - ~a" (get-class-name (caddr stream-data)) (cadr stream-data))))
	       (subject-listbox (make-instance 'listbox :master *school-info-main-frame*)))
	  (prepare-main-window)
	  (listbox-append subject-listbox (mapcar #'cadr stream-subjects))
	  (grid subjects-label 0 0 :padx 10 :pady 5)
	  (grid subject-listbox 1 0 :padx 10 :pady 5))
	(let ((error-text (make-instance 'label :master *school-info-main-frame* :text (format nil "There are no subjects for ~a ~a." (get-class-name (caddr stream-data)) (cadr stream-data)))))
	  (prepare-main-window)
	  (grid error-text 0 0 :padx 10 :pady 5))
	)))
