(defpackage :school.teacher
  (:use :cl :sqlite :ltk :cl-pdf :str :school.ltk :school)
    (:shadow cl-pdf:image cl-pdf:make-image cl-pdf:font-metrics cl-pdf:bbox cl-pdf:name cl-pdf:scale str:repeat)
    (:export :start))

(in-package :school.teacher)

(defparameter *main-frame* nil)		
(defparameter *missing-details-message* "Some school details required to make PDFs are missing, please enter under School Details menu and try again.")
(defparameter *menubar* nil)

(defun create-tables (database)
  (execute-non-query database "create table teacher_info (id integer primary key, surname text, firstname text, date_of_birth text, email text, tel_no1 text, tel_no2 text, sex text, marital_status text, number_of_children integer, subject_1 text, subject_2 text, subject_3 text, subject_4 text, teacher_code text, residence text, cv text, added_on default current_timestamp"))

(defun start ()
  "start the info application, try to create the tables, bind the error to continue execution if the tables are already present. enable foreign key support on the database"
  (conn
    (execute-non-query database "pragma foreign_keys = on") 
    (handler-case
        (create-tables database)
      (sqlite-error (err)
        (declare (ignore err))))
    )
  (with-ltk ()
    (iconphoto *tk* "~/common-lisp/school/static/logos/teacher.png")
    (create-menubar)
    (minsize *tk* 800 600)
    ;; start in maximized on OSX and Windows
    (unless (equal "Linux" (software-type))
      (setf (wm-state *tk*) 'zoomed))
    (wm-title *tk* "School Teacher")
    ))


(defun prepare-main-window ()
  (grid *main-frame* 0 0)
  (grid-columnconfigure *tk* 0 :weight 1) 
  (grid-rowconfigure *tk* 0 :weight 1))

(defun create-menubar ()
  "create a new menu bar, if an old one exists, destroy it, then recreate a new one."
  (when *menubar*
    (destroy *menubar*))
  (setq *menubar* (make-instance 'menubar))
  (let* ((new (make-instance 'menu :master *menubar* :text "New"))
	 (edit (make-instance 'menu :master *menubar* :text "Edit"))
	 (show (make-instance 'menu :master *menubar* :text "Show"))
	 (print (make-instance 'menu :master *menubar* :text "Print")))
    (declare (ignore edit show print))
    (new-teacher-menu new)
    ))

(defun new-teacher-menu (menu)
  "add menu buttons to new teacher menu"
  (make-instance 'menubutton :master menu :text "New Teacher" :command (lambda () (new-teacher-form))))

(defun new-teacher-form ()
  "display form to get new teacher details"
  (unless (null *main-frame*)
    (ltk:destroy *main-frame*))
  (setq *main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let ((title (make-instance 'label :master *main-frame* :text "Enter the details of the teacher."))
	(surname-label (make-instance 'label :master *main-frame* :text "Surname"))
	(surname-entry (make-instance 'entry :master *main-frame*))
	(given-name-label (make-instance 'label :master *main-frame* :text "Given Name"))
	(given-name-entry (make-instance 'entry :master *main-frame*))
	(date-of-birth-label (make-instance 'label :master *main-frame* :text "Date of birth"))
	(date-of-birth-entry (make-instance 'entry :master *main-frame*))
	(email-label (make-instance 'label :master *main-frame* :text "Email"))
	(email-entry (make-instance 'entry :master *main-frame*))
	(school-email-label (make-instance 'label :master *main-frame* :text "School Email"))
	(school-email-entry (make-instance 'entry :master *main-frame*))
	(phone-number-1-label (make-instance 'label :master *main-frame* :text "Tel. No. 1"))
	(phone-number-1-entry (make-instance 'entry :master *main-frame*))
	(phone-number-2-label (make-instance 'label :master *main-frame* :text "Tel. No. 2"))
	(phone-number-2-entry (make-instance 'entry :master *main-frame*))
	(sex-label (make-instance 'label :master *main-frame* :text "Sex"))
	(sex-entry (make-instance 'entry :master *main-frame*))
	(marital-status-label (make-instance 'label :master *main-frame* :text "Marital Status"))
	(marital-status-entry (make-instance 'entry :master *main-frame*))
	(number-of-chilren-label (make-instance 'label :master *main-frame* :text "Number of children"))
	(number-of-children-entry (make-instance 'entry :master *main-frame*))
	(subject-1-label (make-instance 'label :master *main-frame* :text "Subject taught 1"))
	(subject-1-entry (make-instance 'entry :master *main-frame*))
	(subject-2-label (make-instance 'label :master *main-frame* :text "Subject taught 2"))
	(subject-2-entry (make-instance 'entry :master *main-frame*))
	(subject-3-label (make-instance 'label :master *main-frame* :text "Subject taught 3"))
	(subject-3-entry (make-instance 'entry :master *main-frame*))
	(subject-4-label (make-instance 'label :master *main-frame* :text "Subject taught 4"))
	(subject-4-entry (make-instance 'entry :master *main-frame*))
	(residence-label (make-instance 'label :master *main-frame* :text "Residence"))
	(residence-entry (make-instance 'entry :master *main-frame*))
	(teacher-code-label (make-instance 'label :master *main-frame* :text "Teacher code"))
	(teacher-code-entry (make-instance 'entry :master *main-frame*))
	(cv-label (make-instance 'label :master *main-frame* :text "CV"))
	(cv-entry (make-instance 'entry :master *main-frame*))
	(button (make-instance 'button :master *main-frame* :text "Save New Teacher"
				       :command (lambda () ())))
	)
    (prepare-main-window)
    (grid title 0 0)
    (grid surname-label 1 0)
    (grid surname-entry 1 1 :pady 2)
    (grid given-name-label 2 0)
    (grid given-name-entry 2 1 :pady 2)
    (grid date-of-birth-label 3 0)
    (grid date-of-birth-entry 3 1 :pady 2)
    (grid email-label 4 0)
    (grid email-entry 4 1 :pady 2)
    (grid school-email-label 5 0)
    (grid school-email-entry 5 1 :pady 2)
    (grid phone-number-1-label 6 0)
    (grid phone-number-1-entry 6 1 :pady 2)
    (grid phone-number-2-label 7 0)
    (grid phone-number-2-entry 7 1 :pady 2)
    (grid sex-label 8 0)
    (grid sex-entry 8 1 :pady 2)
    (grid marital-status-label 9 0)
    (grid marital-status-entry 9 1 :pady 2)
    (grid number-of-chilren-label 10 0)
    (grid number-of-children-entry 10 1 :pady 2)
    (grid subject-1-label 11 0)
    (grid subject-1-entry 11 1 :pady 2)
    (grid subject-2-label 12 0)
    (grid subject-2-entry 12 1 :pady 2)
    (grid subject-3-label 13 0)
    (grid subject-3-entry 13 1 :pady 2)
    (grid subject-4-label 14 0)
    (grid subject-4-entry 14 1 :pady 2)
    (grid residence-label 15 0)
    (grid residence-entry 15 1 :pady 2)
    (grid teacher-code-label 16 0)
    (grid teacher-code-entry 16 1 :pady 2)
    (grid cv-label 17 0)
    (grid cv-entry 17 1 :pady 2)
    (grid button 18 1 :pady 3)
    ))
