;;; this defines the application for handling general school information.
;;; general school information means the basic structure of the school.

(defpackage :school-info
  (:use :cl :ltk :sqlite)
  (:export :start :create-tables))

(in-package :school-info)

(defparameter *school-info-main-frame* nil)		

;; DB ACCESS FUNCTIONS

(defun create-tables (db)
  (execute-non-query db "create table school_details (id integer primary key, detail_name text unique, detail text, added_on default current_timestamp)")
  (execute-non-query db "create table levels (id integer primary key, level text unique, added_on default current_timestamp)")
  (execute-non-query db "create table classes (id integer primary key, class text unique,  level_id integer, added_on default current_timestamp, foreign key (level_id) references levels (id))")
  (execute-non-query db "create table streams (id integer primary key, class_id integer, stream text unique, added_on default current_timestamp, foreign key (class_id) references classes (id))")
  (execute-non-query db "create table houses (id integer primary key, house text unique, added_on default current_timestamp)")
  (execute-non-query db "create table dorms (id integer primary key, dorm text unique, added_on default current_timestamp)")
  ;; use stream is to ensure uniqueness as different classes can have the same stream
  (execute-non-query db "create table subjects (id integer primary key, subject text, stream_id integer, added_on default current_timestamp, foreign key (stream_id) references streams (id))")
  (execute-non-query db "create table papers (id integer primary key, paper text, subject_id integer, added_on default current_timestamp, foreign key (subject_id) references subjects (id))")
  (save-school-details nil nil nil nil nil nil nil t) ; initialise the table so that we only use update statement.
  )

;; define macros to define the following functions for single entry forms
(defmacro intern-name (var1 type)
  `(let ((action (case ,type
		   (:get "get-~a")
		   (:get-id "get-~a-id")
		   (:delete "delete-~a")
		   (:save "save-~a")
		   (:update "update-~a"))))
     (intern (format nil action ,var1))))

(defmacro conn (&body body)
  `(with-open-database (db (uiop:native-namestring "~/common-lisp/school/db/school.db"))
     ,@body))

(defmacro make-functions-1 (name table)
  `(progn
     (defun ,(intern-name name :get) ()
       (conn 
	 (execute-to-list db (format nil "select id, ~a from ~a" ,name ,table))))
     (defun ,(intern-name name :get-id) (datum)
       (conn 
	 (caar (execute-to-list db (format nil "select id from ~a where ~a = ?" ,table ,name) datum))))
     (defun ,(intern-name name :save) (datum)
       (conn 
	 (execute-non-query db (format nil "insert into ~a (~a) values (?)" ,table ,name) datum)))
     (defun ,(intern-name name :update) (id new-datum)
       (conn 
	 (execute-non-query db (format nil "update ~a set ~a = ? where id = ?" ,table ,name) new-datum id)))
     (defun ,(intern-name name :delete) (id)
       (conn 
	 (execute-non-query db (format nil "delete from ~a where id = ?" ,table) id)))))

(make-functions-1 "level" "levels")
(make-functions-1 "house" "houses")
(make-functions-1 "dorm" "dorms")


;; SCHOOL DETAILS
(defun save-school-details (name motto location phone-number pobox fax email &optional init)
  (conn
    (dolist (detail (list (cons "name" name)
			  (cons "motto" motto)
			  (cons "location" location)
			  (cons "phone_number" phone-number)
			  (cons "pobox" pobox)
			  (cons "fax" fax)
			  (cons "email" email)))
      (if init
	  (execute-non-query db "insert into school_details (detail_name, detail) values (?, ?)" (car detail) (cdr detail))
	  (execute-non-query db "update school_details set detail = ? where detail_name = ?" (cdr detail) (car detail))))))

(defun get-school-details ()
  (mapcar (lambda (detail)
	    (cons (car detail) (cadr detail)))
	  (conn (execute-to-list db "select detail_name, detail from school_details"))))

;; CLASS FUNCTIONS
(defun get-classes (&optional level-id)
  (conn 
    (if level-id
	(execute-to-list db "select id, class from classes where level_id = ?" level-id)
	(execute-to-list db "select id, class, level_id from classes"))))

(defun get-class-id (class)
  (conn 
    (caar (execute-to-list db "select id from classes where class = ?" class))))

(defun get-class-name (class-id)
  (conn 
    (caar (execute-to-list db "select class from classes where id = ?" class-id))))

(defun save-class (level-id class)
  (conn 
    (execute-non-query db "insert into classes (level_id, class) values (?, ?)" level-id class)))

(defun update-class (class-id new-class)
  (conn 
    (execute-non-query db "update classes set class = ? where id = ?" new-class class-id)))

(defun delete-class (class-id)
  (conn 
    (execute-non-query db "delete from classes where id = ?" class-id)))

(defun iconbitmap (path-to-icon)		
  (format-wish "wm iconbitmap . ~a" path-to-icon))					

;; STREAM FUNCTIONS
(defun get-streams (&optional class-id)
  (conn 
    (if class-id
	(execute-to-list db "select id, stream, class_id from streams where class_id = ?" class-id)
	(execute-to-list db "select id, stream, class_id from streams"))))

(defun save-stream (class-id stream)
  (conn 
    (execute-non-query db "insert into streams (class_id, stream) values (?, ?)" class-id stream)))

(defun update-stream (stream-id new-stream)
  (conn 
    (execute-non-query db "update streams set stream = ? where id = ?" new-stream stream-id)))

(defun delete-stream (stream-id)
  (conn 
    (execute-non-query db "delete from streams where id = ?" stream-id)))

;; HOUSE FUNCTIONS
(defun get-houses ()
  (conn 
    (execute-to-list db "select id, house from houses")))

(defun save-house (house)
  (conn 
    (execute-non-query db "insert into houses (house) values (?)" house)))

(defun update-house (id new-house)
  (conn 
    (execute-non-query db "update houses set house = ? where id = ?" new-house id)))

(defun delete-house (id)
  (conn 
    (execute-non-query db "delete from houses where id = ?" id)))

;; SUBJECT FUNCTIONS
(defun get-subjects (&optional stream-id)
  (conn
    (if stream-id
	(execute-to-list db "select id, subject, stream_id from subjects where stream_id = ?" stream-id)
	(execute-to-list db "select id, subject, stream_id from subjects"))))

(defun get-stream-subjects (stream-id)
  (conn 
    (execute-to-list db "select id, subject from subjects where stream_id = ?" stream-id)))

(defun save-subject (stream-id subject)
  (conn 
    (execute-non-query db "insert into subjects (stream_id, subject) values (?, ?)" stream-id subject)))

(defun update-subject (subject-id subject)
  (conn 
    (execute-non-query db "update subjects set subject = ? where id = ?" subject subject-id)))

(defun delete-subject (subject-id)
  (conn 
    (execute-non-query db "delete from subjects where id = ?" subject-id)))

;; PAPER FUNCTIONS
(defun get-papers (subject-id)
  (conn 
    (execute-to-list db "select id, paper from papers where subject_id = ?" subject-id)))

(defun save-paper (subject-id paper)
  (conn 
    (execute-non-query db "insert into papers (subject_id, paper) values (?, ?)" subject-id paper)))

(defun update-paper (paper-id paper)
  (conn 
    (execute-non-query db "update papers set paper = ? where id = ?" paper paper-id)))

(defun delete-paper (paper-id)
  (conn 
    (execute-non-query db "delete from papers where id = ?" paper-id)))

(defparameter *menubar* nil)

(defun prepare-main-window ()
  (grid *school-info-main-frame* 0 0)
  (grid-columnconfigure *tk* 0 :weight 1) 
  (grid-rowconfigure *tk* 0 :weight 1))

(defun level-menu (level-menu)
  "defines the functions that display the level menu on the menubar"
  (make-instance 'menubutton :master level-menu :text "New" :command (lambda () (level-form)))
  (let ((edit-level-menu (make-instance 'menu :master level-menu :text "Edit"))
	(delete-level-menu (make-instance 'menu :master level-menu :text "Delete"))
	(levels (|get-level|)))
    (dolist (level levels)
      (make-instance 'menubutton :master edit-level-menu :text (cadr level) :command (lambda () (level-form level)))
      (make-instance 'menubutton :master delete-level-menu :text (cadr level)
				 :command (lambda ()
					    (let ((message-text "Level has been deleted."))
					      (handler-case (|delete-level| (car level))
						(sqlite-constraint-error (err)
						  (declare (ignore err))
						  (setq message-text "Level can't be deleted as it has classes, first delete them and try again.")))
					      (create-menubar)
					      (grid-columnconfigure *tk* 0 :weight 1) 
					      (grid-rowconfigure *tk* 0 :weight 1)
					      (destroy *school-info-main-frame*)
					      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					      (grid *school-info-main-frame* 0 0)
					      (grid (make-instance 'label :master *school-info-main-frame* :text message-text) 1 0))))))
  (make-instance 'menubutton :master level-menu :text "Show levels" :command (lambda () (show-levels))))

(defun class-menu (class-menu)
  (make-instance 'menubutton :master class-menu :text "New" :command (lambda () (class-form)))
  (let ((edit-menu (make-instance 'menu :master class-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master class-menu :text "Delete"))
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (make-instance 'menubutton :master edit-level-menu :text (cadr class) :command (lambda () (class-form level class)))
	  (make-instance 'menubutton :master delete-level-menu :text (cadr class)
				     :command (lambda ()
						(let ((message "The class has been deleted.")) 
						  (handler-case (delete-class (car class))
						    (sqlite-constraint-error (err)
						      (declare (ignore err))
						      (setq message "Class can't be as it has streams, first delete them and try again.")))
						  (create-menubar)
						  (grid-columnconfigure *tk* 0 :weight 1) 
						  (grid-rowconfigure *tk* 0 :weight 1)
						  (destroy *school-info-main-frame*)
						  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
						  (grid *school-info-main-frame* 0 0)
						  (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))
						))))))
  (make-instance 'menubutton :master class-menu :text "Show classes" :command (lambda () (show-classes))))

(defun stream-menu (stream-menu)  
  (let ((new-menu (make-instance 'menu :master stream-menu :text "New"))
	(edit-menu (make-instance 'menu :master stream-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master stream-menu :text "Delete"))
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((new-level-menu (make-instance 'menu :master new-menu :text (cadr level)))
	     (edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (make-instance 'menubutton :master new-level-menu :text (cadr class) :command (lambda () (stream-form class)))
	  (let* ((edit-class-menu (make-instance 'menu :master edit-level-menu :text (cadr class)))
		 (delete-class-menu (make-instance 'menu :master delete-level-menu :text (cadr class)))
		 (streams (get-streams (car class))))
	    (dolist (stream streams)
	      (make-instance 'menubutton :master edit-class-menu :text (cadr stream) :command (lambda () (stream-form class stream)))
	      (make-instance 'menubutton :master delete-class-menu :text (cadr stream)
					 :command (lambda ()
						    (let ((message "The stream has been deleted."))
						      (handler-case (delete-stream (car stream))
							(sqlite-constraint-error (err)
							  (declare (ignore err))
							  (setq message "The stream can't be deleted as it has subjects, first delete them and try again.")))
						      (create-menubar)
						      (grid-columnconfigure *tk* 0 :weight 1) 
						      (grid-rowconfigure *tk* 0 :weight 1)
						      (destroy *school-info-main-frame*)
						      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
						      (grid *school-info-main-frame* 0 0)
						      (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))
						    ))))))))
  (make-instance 'menubutton :master stream-menu :text "Show streams" :command (lambda () (show-streams))))

(defun subject-menu (subject-menu)
  (let ((new-menu (make-instance 'menu :master subject-menu :text "New"))
	(show-menu (make-instance 'menu :master subject-menu :text "Show"))
	(edit-menu (make-instance 'menu :master subject-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master subject-menu :text "Delete")) 
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((new-level-menu (make-instance 'menu :master new-menu :text (cadr level)))
	     (edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (show-level-menu (make-instance 'menu :master show-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (let* ((new-class-menu (make-instance 'menu :master new-level-menu :text (cadr class)))
		 (edit-class-menu (make-instance 'menu :master edit-level-menu :text (cadr class)))
		 (show-class-menu (make-instance 'menu :master show-level-menu :text (cadr class)))
		 (delete-class-menu (make-instance 'menu :master delete-level-menu :text (cadr class)))
		 (streams (get-streams (car class))))
	    (dolist (stream streams)
	      (make-instance 'menubutton :master new-class-menu :text (cadr stream) :command (lambda () (subject-form class stream)))
	      (make-instance 'menubutton :master show-class-menu :text (cadr stream) :command (lambda () (show-stream-subjects stream)))
	      (let ((subjects (get-stream-subjects (car stream)))
		    (edit-stream-menu (make-instance 'menu :master edit-class-menu :text (cadr stream)))
		    (delete-stream-menu (make-instance 'menu :master delete-class-menu :text (cadr stream))))
		(dolist (subject subjects)
		  (make-instance 'menubutton :master edit-stream-menu :text (cadr subject) :command (lambda () (subject-form class stream subject)))
		  (make-instance 'menubutton :master delete-stream-menu :text (cadr subject) :command (lambda ()
													(let ((message "The subject has been deleted"))
													  (handler-case (delete-subject (car subject))
													    (sqlite-constraint-error (err)
													      (declare (ignore err))
													      (setq message "The subject has papers, first delete them and try again.")))
													  (create-menubar)
													  (grid-columnconfigure *tk* 0 :weight 1) 
													  (grid-rowconfigure *tk* 0 :weight 1)
													  (destroy *school-info-main-frame*)
													  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
													  (grid *school-info-main-frame* 0 0)
													  (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))))))))
  (make-instance 'menubutton :master subject-menu :text "Show Subjects" :command (lambda () (show-subjects))))

(defun paper-menu (paper-menu)
  (let ((new-menu (make-instance 'menu :master paper-menu :text "New"))
	(edit-menu (make-instance 'menu :master paper-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master paper-menu :text "Delete")) 
	(levels (|get-level|)))
    (dolist (level levels)
      (let* ((new-level-menu (make-instance 'menu :master new-menu :text (cadr level)))
	     (edit-level-menu (make-instance 'menu :master edit-menu :text (cadr level)))
	     (delete-level-menu (make-instance 'menu :master delete-menu :text (cadr level)))
	     (classes (get-classes (car level))))
	(dolist (class classes)
	  (let* ((new-class-menu (make-instance 'menu :master new-level-menu :text (cadr class)))
		 (edit-class-menu (make-instance 'menu :master edit-level-menu :text (cadr class)))
		 (delete-class-menu (make-instance 'menu :master delete-level-menu :text (cadr class)))
		 (streams (get-streams (car class))))
	    (dolist (stream streams)
	      (let ((subjects (get-stream-subjects (car stream)))
		    (new-stream-menu (make-instance 'menu :master new-class-menu :text (cadr stream)))
		    (edit-stream-menu (make-instance 'menu :master edit-class-menu :text (cadr stream)))
		    (delete-stream-menu (make-instance 'menu :master delete-class-menu :text (cadr stream))))
		(dolist (subject subjects)
		  (make-instance 'menubutton :master new-stream-menu :text (cadr subject) :command (lambda () (paper-form class stream subject)))
		  (let ((papers (get-papers (car subject)))
			(edit-subject-menu (make-instance 'menu :master edit-stream-menu :text (cadr subject)))
			(delete-subject-menu (make-instance 'menu :master delete-stream-menu :text (cadr subject)))
			)
		    (dolist (paper papers)
		      (make-instance 'menubutton :master edit-subject-menu :text (cadr paper) :command (lambda () (paper-form class stream subject paper)))
		      (make-instance 'menubutton :master delete-subject-menu :text (cadr paper) :command (lambda ()
													   (let ((message "The paper has been deleted"))
													     (handler-case (delete-paper (car paper))
													       (sqlite-constraint-error (err)
														 (declare (ignore err))
														 (setq message "The paper has dependant data, first delete them and try again.")))
													     (create-menubar)
													     (grid-columnconfigure *tk* 0 :weight 1) 
													     (grid-rowconfigure *tk* 0 :weight 1)
													     (destroy *school-info-main-frame*)
													     (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
													     (grid *school-info-main-frame* 0 0)
													     (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))))))))))
  (make-instance 'menubutton :master paper-menu :text "Show papers" :command (lambda () (show-papers))))

(defun house-menu (house-menu)
  (make-instance 'menubutton :master house-menu :text "New" :command (lambda () (house-form)))
  (let ((edit-menu (make-instance 'menu :master house-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master house-menu :text "Delete"))
	(houses (|get-house|)))
    (dolist (house houses)
      (make-instance 'menubutton :master edit-menu :text (cadr house) :command (lambda () (house-form house)))
      (make-instance 'menubutton :master delete-menu :text (cadr house)
				 :command (lambda ()
					    (let ((message-text "House has been deleted."))
					      (handler-case (|delete-house| (car house))
						(sqlite-constraint-error (err)
						  (declare (ignore err))
						  (setq message-text "House can't be deleted as it has data depending on it, first delete them and try again.")))
					      (create-menubar)
					      (grid-columnconfigure *tk* 0 :weight 1) 
					      (grid-rowconfigure *tk* 0 :weight 1)
					      (destroy *school-info-main-frame*)
					      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					      (grid *school-info-main-frame* 0 0)
					      (grid (make-instance 'label :master *school-info-main-frame* :text message-text) 1 0))))))
  (make-instance 'menubutton :master house-menu :text "Show houses" :command (lambda () (show-houses))))

(defun dorm-menu (dorm-menu)
  (make-instance 'menubutton :master dorm-menu :text "New" :command (lambda () (dorm-form)))
  (let ((edit-menu (make-instance 'menu :master dorm-menu :text "Edit"))
	(delete-menu (make-instance 'menu :master dorm-menu :text "Delete"))
	(dorms (|get-dorm|)))
    (dolist (dorm dorms)
      (make-instance 'menubutton :master edit-menu :text (cadr dorm) :command (lambda () (dorm-form dorm)))
      (make-instance 'menubutton :master delete-menu :text (cadr dorm)
				 :command (lambda ()
					    (let ((message-text "Dorm has been deleted."))
					      (handler-case (|delete-dorm| (car dorm))
						(sqlite-constraint-error (err)
						  (declare (ignore err))
						  (setq message-text "Dorm can't be deleted as it has data depending on it, first delete them and try again.")))
					      (create-menubar)
					      (grid-columnconfigure *tk* 0 :weight 1) 
					      (grid-rowconfigure *tk* 0 :weight 1)
					      (destroy *school-info-main-frame*)
					      (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
					      (grid *school-info-main-frame* 0 0)
					      (grid (make-instance 'label :master *school-info-main-frame* :text message-text) 1 0))))))
  (make-instance 'menubutton :master dorm-menu :text "Show dorms" :command (lambda () (show-dorms))))

(defun details-menu (menu)
  (make-instance 'menubutton :master menu :text "Edit details" :command (lambda () (details-form)))
  (make-instance 'menubutton :master menu :text "Show details" :command (lambda () (show-details))))

(defun create-menubar ()
  "create a new menu bar, if an old one exists, destroy it, then recreate a new one."
  (when *menubar*
    (destroy *menubar*))
  (setq *menubar* (make-instance 'menubar))
  (let* ((details (make-instance 'menu :master *menubar* :text "School details"))
	 (level-menu (make-instance 'menu :master *menubar* :text "Levels"))
	 (class-menu (make-instance 'menu :master *menubar* :text "Classes"))
	 (stream-menu (make-instance 'menu :master *menubar* :text "Streams"))
	 (subject-menu (make-instance 'menu :master *menubar* :text "Subjects"))
	 (paper-menu (make-instance 'menu :master *menubar* :text "Papers"))
	 (house-menu (make-instance 'menu :master *menubar* :text "Houses"))
	 (dorm-menu (make-instance 'menu :master *menubar* :text "Dormitories"))
	 )
    (details-menu details)
    (level-menu level-menu)
    (class-menu class-menu)
    (stream-menu stream-menu)
    (subject-menu subject-menu)
    (paper-menu paper-menu)
    (house-menu house-menu)
    (dorm-menu dorm-menu)
    ))


(defun start ()
  "start the info application, try to create the tables, bind the error to continue execution if the tables are already present. enable foreign key support on the database"
  (conn 
    (execute-non-query db "pragma foreign_keys = on") 
    (handler-case
	(create-tables db)
      (sqlite-error (err)
	(declare (ignore err)))))
  (with-ltk ()
					; (iconbitmap #p"/home/lam/common-lisp/school/favicon.ico")
    (create-menubar)
    (minsize *tk* 800 600)
    ;; start in maximized on OSX and Windows
    (unless (equal "Linux" (software-type))
      (setf (wm-state *tk*) 'zoomed))
    (wm-title *tk* "School Info")
    ))

(defun details-form ()
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (flet ((get-detail (data key) (cdr (assoc key data :test #'string-equal))))
    (let* ((data (get-school-details))
	   (heading (make-instance 'label :master *school-info-main-frame* :text "Basic Information about the school."))
	   (name-label (make-instance 'label :master *school-info-main-frame* :text "Name"))
	   (name-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "name")))
	   (motto-label (make-instance 'label :master *school-info-main-frame* :text "Motto"))
	   (motto-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "motto")))
	   (location-label (make-instance 'label :master *school-info-main-frame* :text "Location"))
	   (location-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "location")))
	   (phone-number-label (make-instance 'label :master *school-info-main-frame* :text "Phone Number"))
	   (phone-number-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "phone_number")))
	   (pobox-label (make-instance 'label :master *school-info-main-frame* :text "P.O. Box"))
	   (pobox-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "pobox")))
	   (fax-label (make-instance 'label :master *school-info-main-frame* :text "Fax"))
	   (fax-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "fax")))
	   (email-label (make-instance 'label :master *school-info-main-frame* :text "Email"))
	   (email-entry (make-instance 'entry :master *school-info-main-frame* :text (get-detail data "email")))
	   (save-button (make-instance 'button :master *school-info-main-frame*
					       :text "Save School Details"
					       :command (lambda ()
							  (save-school-details (text name-entry)
									       (text motto-entry)
									       (text location-entry)
									       (text phone-number-entry)
									       (text pobox-entry)
									       (text fax-entry)
									       (text email-entry))
							  (create-menubar)
							  (destroy *school-info-main-frame*)
							  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
							  (grid *school-info-main-frame* 0 0)
							  (grid (make-instance 'label :master *school-info-main-frame* :text "The school details have been saved.") 1 0)
							  ))))
      (prepare-main-window)
      (grid heading 0 0 :padx 10 :pady 5)
      (grid  name-label 1 0 :padx 10 :pady 5)
      (grid  name-entry 1 2 :padx 10 :pady 5)
      (grid  motto-label 2 0 :padx 10 :pady 5)
      (grid  motto-entry 2 2 :padx 10 :pady 5)
      (grid  location-label 3 0 :padx 10 :pady 5)
      (grid  location-entry 3 2 :padx 10 :pady 5)
      (grid  phone-number-label 4 0 :padx 10 :pady 5)
      (grid  phone-number-entry 4 2 :padx 10 :pady 5)
      (grid  pobox-label 5 0 :padx 10 :pady 5)
      (grid  pobox-entry 5 2 :padx 10 :pady 5)
      (grid  fax-label 6 0 :padx 10 :pady 5)
      (grid  fax-entry 6 2 :padx 10 :pady 5)
      (grid  email-label 7 0 :padx 10 :pady 5)
      (grid  email-entry 7 2 :padx 10 :pady 5)
      (grid save-button 8 2 :pady 10))))

(defun show-details ()
  "this displays the details of the school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (flet ((get-detail (data key) (cdr (assoc key data :test #'string-equal))))
    (let* ((data (get-school-details))
	   (heading (make-instance 'label :master *school-info-main-frame* :text "Basic Information about the school."))
	   (name-label (make-instance 'label :master *school-info-main-frame* :text "Name"))
	   (name-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "name")))
	   (motto-label (make-instance 'label :master *school-info-main-frame* :text "Motto"))
	   (motto-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "motto")))
	   (location-label (make-instance 'label :master *school-info-main-frame* :text "Location"))
	   (location-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "location")))
	   (phone-number-label (make-instance 'label :master *school-info-main-frame* :text "Phone Number"))
	   (phone-number-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "phone_number")))
	   (pobox-label (make-instance 'label :master *school-info-main-frame* :text "P.O. Box"))
	   (pobox-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "pobox")))
	   (fax-label (make-instance 'label :master *school-info-main-frame* :text "Fax"))
	   (fax-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "fax")))
	   (email-label (make-instance 'label :master *school-info-main-frame* :text "Email"))
	   (email-data (make-instance 'label :master *school-info-main-frame* :text (get-detail data "email")))
	   (print-button (make-instance 'button :master *school-info-main-frame*
					       :text "Print School Details")))
      (prepare-main-window)
      (grid heading 0 0 :padx 10 :pady 5)
      (grid name-label 1 0 :padx 10 :pady 5)
      (grid name-data 1 2 :padx 10 :pady 5)
      (grid motto-label 2 0 :padx 10 :pady 5)
      (grid motto-data 2 2 :padx 10 :pady 5)
      (grid location-label 3 0 :padx 10 :pady 5)
      (grid location-data 3 2 :padx 10 :pady 5)
      (grid phone-number-label 4 0 :padx 10 :pady 5)
      (grid phone-number-data 4 2 :padx 10 :pady 5)
      (grid pobox-label 5 0 :padx 10 :pady 5)
      (grid pobox-data 5 2 :padx 10 :pady 5)
      (grid fax-label 6 0 :padx 10 :pady 5)
      (grid fax-data 6 2 :padx 10 :pady 5)
      (grid email-label 7 0 :padx 10 :pady 5)
      (grid email-data 7 2 :padx 10 :pady 5)
      (grid print-button 8 2 :pady 10))))


(defun level-form (&optional level)
  "collect and process data about levels
   (= level (cons id level))"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let* (
	 (level-label (make-instance 'label :master *school-info-main-frame* :text "Enter Level Name"))
	 (level-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr level)))
	 (save-button (make-instance 'button :master *school-info-main-frame*
					     :text "Save Level" :command (let ((message "The level has been saved")) 
									   (lambda ()
									     (if level
										 (|update-level| (car level) (text level-entry))
										 (handler-case (|save-level| (text level-entry))
										   (sqlite-constraint-error (err)
										     (declare (ignore err))
										     (setq message (format nil "Not saved. A level named ~a already exists" (text level-entry))))))
									     (create-menubar)
									     (destroy *school-info-main-frame*)
									     (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
									     (grid *school-info-main-frame* 0 0)
									     (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))
    (prepare-main-window)
    (grid  level-label 1 0 :padx 10 :pady 5)
    (grid level-entry 1 2 :padx 10 :pady 5 :sticky "e" :columnspan 5)
    (grid save-button 2 2 :pady 10)))

(defun show-levels ()
  "Show levels of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (let ((index 1)
	(levels (|get-level|)))
    (if (eq 0 (length levels))
	(grid (make-instance 'label :master *school-info-main-frame* :text "No level has been added yet.") 1 0 :padx 10 :pady 5)
	(dolist (level levels)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) index 0)
	  (setq index (+ index 1))))))

(defun house-form (&optional house)
  "collect and process data about houses
   (= house (cons id house))"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let* (
	 (house-label (make-instance 'label :master *school-info-main-frame* :text "Enter House Name"))
	 (house-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr house)))
	 (save-button (make-instance 'button :master *school-info-main-frame*
					     :text "Save House" :command (let ((message "The house has been saved"))
									   (lambda ()
									     (if house
										 (|update-house| (car house) (text house-entry))
										 (handler-case (|save-house| (text house-entry))
										   (sqlite-constraint-error (err)
										     (declare (ignore err))
										     (setq message (format nil "Not saved. A house named ~a already exists" (text house-entry))))))
									     (create-menubar)
									     (destroy *school-info-main-frame*)
									     (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
									     (grid *school-info-main-frame* 0 0)
									     (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))
    (prepare-main-window)
    (grid  house-label 1 0 :padx 10 :pady 5)
    (grid house-entry 1 2 :padx 10 :pady 5 :sticky "e" :columnspan 5)
    (grid save-button 2 2 :pady 10)))

(defun show-houses ()
  "Show houses of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (let ((index 1)
	(houses (|get-house|)))
    (if (eq 0 (length houses))
	(grid (make-instance 'label :master *school-info-main-frame* :text "No house has been added yet") 1 0 :padx 10 :pady 5)
	(dolist (house houses)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr house)) index 0)
	  (setq index (+ index 1))))))

(defun dorm-form (&optional dorm)
  "collect and process data about dorms
   (= dorm (cons id dorm))"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (let* (
	 (dorm-label (make-instance 'label :master *school-info-main-frame* :text "Enter Dorm Name"))
	 (dorm-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr dorm)))
	 (save-button (make-instance 'button :master *school-info-main-frame*
					     :text "Save Dorm" :command (let ((message "The house has been saved"))
									  (lambda ()
									    (if dorm
										(|update-dorm| (car dorm) (text dorm-entry))
										(handler-case (|save-dorm| (text dorm-entry))
										  (sqlite-constraint-error (err)
										    (declare (ignoreyerr))
										    (setq message (format nil "Not saved. The dorm named ~a already exists" (text dorm-entry))))))
									    (create-menubar)
									    (destroy *school-info-main-frame*)
									    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
									    (grid *school-info-main-frame* 0 0)
									    (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))
    (prepare-main-window)
    (grid  dorm-label 1 0 :padx 10 :pady 5)
    (grid dorm-entry 1 2 :padx 10 :pady 5 :sticky "e" :columnspan 5)
    (grid save-button 2 2 :pady 10)))

(defun show-dorms ()
  "Show dorms of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  (let ((index 1)
	(dorms (|get-dorm|)))
    (if (eq 0 (length dorms))
	(grid (make-instance 'label :master *school-info-main-frame* :text "No dorm has been added yet.") 1 0 :padx 10 :pady 5)
	(dolist (dorm dorms)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr dorm)) index 0)
	  (setq index (+ index 1))))))

(defun class-form (&optional level class)
  "collect and process data about classes
   the form has a combobox list of levels to choose from, shows an error if no levels are present."
  (let ((levels (|get-level|)))   
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (if levels
	(let* (
	       (level-label (make-instance 'label :master *school-info-main-frame* :text "Select Level"))
	       (level-combobox (make-instance 'combobox :text (if level (cadr level)
								  (cadar levels)) :master *school-info-main-frame* :values (mapcar (lambda (x) (cadr x)) levels)))
	       (class-label (make-instance 'label :master *school-info-main-frame* :text "Enter Class Name"))
	       (class-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr class)))
	       (save-button (make-instance 'button :master *school-info-main-frame*
						   :text "Save Class" :command (let ((message "The class has been saved"))
										 (lambda ()
										   (if class
										       (update-class (car class) (text class-entry))
										       (handler-case 
											   (save-class (|get-level-id| (text level-combobox)) (text class-entry))
											 (sqlite-constraint-error (err)
											   (declare (ignore err))
											   (setq message (format nil "A class with name ~a already exists" (text class-entry))))))
										   (create-menubar)
										   (destroy *school-info-main-frame*)
										   (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
										   (grid *school-info-main-frame* 0 0)
										   (grid (make-instance 'label :master *school-info-main-frame* :text message) 1 0))))))
	  (prepare-main-window)
	  (grid level-label 0 0 :padx 10 :pady 5)
	  (grid level-combobox 0 2 :padx 10 :pady 5)
	  (grid class-label 1 0 :padx 10 :pady 5)
	  (grid class-entry 1 2 :padx 10 :pady 5 :sticky "e" :columnspan 5)
	  (grid save-button 2 2 :pady 10))
	(let ((error-text (make-instance 'label :master *school-info-main-frame* :text "There are no levels, first create a level to continue.")))
	  (prepare-main-window)
	  (grid error-text 0 0 :padx 10 :pady 5))
	)))

(defun show-classes ()
  "Show classes of levels of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  ;;; define a local recursive function count, displays the levels one below the other
  ;;; index keeps track of the row in the window to add widget to
  (let ((index 1)
	(levels (|get-level|)))
    (if (eq 0 (length levels))
	(progn
	  (grid (make-instance 'label :master *school-info-main-frame* :text "No level has been added yet") 1 0 :padx 10 :pady 5)
	  (setq index (+ index 1)))
	(dolist (level levels)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) index 0)
	  (setq index (+ index 1))
	  (let ((classes (get-classes (car level))))
	    (if (eq 0 (length classes))
		(progn (grid (make-instance 'label :master *school-info-main-frame* :text (format nil "No classes yet for level: ~a" (car level))) index 1)
		       (setq index (+ index 1)))
		(dolist (class classes)
		  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) index 1)
		  (setq index (+ index 1)))))
	  (grid (make-instance 'separator :master *school-info-main-frame*) index 1 :columnspan 2 :sticky "nsew")
	  (setq index (+ index 1))))))

(defun stream-form (class-data &optional stream-data)
  "collect and process data about streams. includes a combobox for selecting a class, every stream should be part of a class."
  (let ((classes (get-classes))
	(class-text (cadr class-data))
	(class-id (car class-data))
	(stream-text (cadr stream-data))
	(stream-id (car stream-data)))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (if classes
	(let* (
	       (class-label (make-instance 'label :master *school-info-main-frame* :text "Choose Class Name"))
	       (class-combobox (make-instance 'entry :text class-text :master *school-info-main-frame* :state :disabled))
	       (stream-label (make-instance 'label :master *school-info-main-frame* :text "Enter Stream Name"))
	       (stream-entry (make-instance 'entry :master *school-info-main-frame* :text stream-text))
	       (save-button (make-instance 'button :master *school-info-main-frame*
						   :text "Save Stream" :command (lambda ()
										  (if stream-text
										      (update-stream stream-id (text stream-entry))
										      (save-stream class-id (text stream-entry)))
										  (create-menubar)
										  (destroy *school-info-main-frame*)
										  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
										  (grid *school-info-main-frame* 0 0)
										  (grid (make-instance 'label :master *school-info-main-frame* :text "The stream has been saved.") 1 0)))))
	  (prepare-main-window)
	  (grid class-label 1 0 :padx 10 :pady 5)
	  (grid class-combobox 1 2 :padx 10 :pady 5 :sticky "e" :columnspan 5)
	  (grid stream-label 2 0 :padx 10 :pady 5)
	  (grid stream-entry 2 1 :padx 10 :pady 5 :sticky "e" :columnspan 5)
	  (grid save-button 3 2 :pady 10))
	(let ((error-text (make-instance 'label :master *school-info-main-frame* :text "There are no classes, first create a class to add stream to.")))
	  (prepare-main-window)
	  (grid error-text 0 0 :padx 10 :pady 5))
	)))

(defun show-streams ()
  "Show classes of levels of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  ;;; define a local recursive function count, displays the levels one below the other
  ;;; index keeps track of the row in the window to add widget to
  (let ((index 1)
	(levels (|get-level|)))
    (if (eq 0 (length levels))
	(progn
	  (grid (make-instance 'label :master *school-info-main-frame* :text "No level has been added yet") 1 0 :padx 10 :pady 5)
	  (setq index (+ index 1)))
	(dolist (level levels)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) index 0)
	  (setq index (+ index 1))
	  (let ((classes (get-classes (car level))))
	    (if (eq 0 (length classes))
		(progn (grid (make-instance 'label :master *school-info-main-frame* :text "No classes yet.") index 2)
		       (setq index (+ index 1)))
		(dolist (class classes)
		  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) index 2)
		  (setq index (+ index 1))
		  (let ((streams (get-streams (car class))))
		    (if (eq 0 (length streams))
			(progn (grid (make-instance 'label :master *school-info-main-frame* :text "No streams yet.") index 3)
			       (setq index (+ index 1)))
			(dolist (stream streams)
			  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr stream)) index 3)
			  (setq index (+ 1 index)))
			)))))
	  (setq index (+ index 1))))))

(defun subject-form (class-data stream-data &optional subject-data)
  "create a new subject; (= stream-data (cons stream stream_id class_id))
   (= subject-data (cons subject_id subject"
  (let ((class (cadr class-data))
	(stream (cadr stream-data))
	(stream-id (car stream-data))
	(subject-name (cadr subject-data))
	(subject-id (car subject-data)))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (let* (
	   (class-label (make-instance 'label :master *school-info-main-frame* :text "Class"))
	   (class-entry (make-instance 'entry :master *school-info-main-frame* :text class :state :disabled))
	   (stream-label (make-instance 'label :master *school-info-main-frame* :text "Stream"))
	   (stream-entry (make-instance 'entry :master *school-info-main-frame* :text stream :state :disabled))
	   (subject-label (make-instance 'label :master *school-info-main-frame* :text "Enter Subject"))
	   (subject-entry (make-instance 'entry :master *school-info-main-frame* :text subject-name))
	   (save-button (make-instance 'button :master *school-info-main-frame*
					       :text "Save Subject" :command (lambda ()
									       (if subject-name
										   (update-subject subject-id (text subject-entry))
										   (save-subject stream-id (text subject-entry))
										   )
									       (create-menubar)
									       (destroy *school-info-main-frame*)
									       (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
									       (grid *school-info-main-frame* 0 0)
									       (grid (make-instance 'label :master *school-info-main-frame* :text "The subject has been saved.") 1 0))))
	   )
      (prepare-main-window)
      (grid class-label 0 0 :padx 10 :pady 5)
      (grid class-entry 0 2 :padx 10 :pady 5)
      (grid stream-label 1 0 :padx 10 :pady 5)
      (grid stream-entry 1 2 :padx 10 :pady 5)
      (grid subject-label 2 0 :padx 10 :pady 5)
      (grid subject-entry 2 2 :padx 10 :pady 5)
      (grid save-button 3 2 :pady 10))))

(defun show-subjects ()
  "Show subjects of streams of a school"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
  ;;; define a local recursive function count, displays the levels one below the other
  ;;; index keeps track of the row in the window to add widget to
  ;;; show the class and stream, then list subjects under each.
  (let ((index 1)
	(levels (|get-level|)))
    (if (eq 0 (length levels))
	(progn
	  (grid (make-instance 'label :master *school-info-main-frame* :text "No level has been added yet") 1 0 :padx 10 :pady 5)
	  (setq index (+ index 1)))
	(dolist (level levels)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) index 0)
	  (setq index (+ index 1))
	  (let ((classes (get-classes (car level))))
	    (if (eq 0 (length classes))
		(progn (grid (make-instance 'label :master *school-info-main-frame* :text "No classes yet.") index 2)
		       (setq index (+ index 1)))
		(dolist (class classes)
		  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) index 2)
		  (setq index (+ index 1))
		  (let ((streams (get-streams (car class))))
		    (if (eq 0 (length streams))
			(progn (grid (make-instance 'label :master *school-info-main-frame* :text "No streams yet.") index 3)
			       (setq index (+ index 1)))
			(dolist (stream streams)
			  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr stream)) index 3)
			  (setq index (+ 1 index))
			  (let ((subjects (get-subjects (car stream))))
			    (if (eq 0 (length subjects))
				(progn  (grid (make-instance 'label :master *school-info-main-frame* :text "No subjects yet.") index 4)
					(setq index (+ 1 index)))
				(dolist (subject subjects)
				  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr subject)) index 4)
				  (setq index (+ 1 index))))))
			)))))
	  (setq index (+ index 1))))))

(defun paper-form (class-data stream-data subject-data &optional paper-data)
  "create a new paper; (= paper-data (cons paper-id paper))
   (= subject (cons id subject))"
  (let ((subject-id (car subject-data))
	(subject-name (cadr subject-data))
	(paper-name (cadr paper-data))
	(paper-id (car paper-data)))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (let* ((class-label (make-instance 'label :master *school-info-main-frame* :text "Class"))
	   (class-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr class-data) :state :disabled))
	   (stream-label (make-instance 'label :master *school-info-main-frame* :text "Stream"))
	   (stream-entry (make-instance 'entry :master *school-info-main-frame* :text (cadr stream-data) :state :disabled))
	   (subject-label (make-instance 'label :master *school-info-main-frame* :text "Subject"))
	   (subject-entry (make-instance 'entry :master *school-info-main-frame* :text subject-name :state :disabled))
	   (paper-label (make-instance 'label :master *school-info-main-frame* :text "Enter Paper"))
	   (paper-entry (make-instance 'entry :master *school-info-main-frame* :text paper-name))
	   (save-button (make-instance 'button :master *school-info-main-frame*
					       :text "Save Paper" :command (lambda ()
									     (if paper-data
										 (update-paper paper-id (text paper-entry))
										 (save-paper subject-id (text paper-entry))
										 )
									     (create-menubar)
									     (destroy *school-info-main-frame*)
									     (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
									     (grid *school-info-main-frame* 0 0)
									     (grid (make-instance 'label :master *school-info-main-frame* :text "The paper has been saved.") 1 0))))
	   )
      (prepare-main-window)
      (grid class-label 0 0 :padx 10 :pady 5)
      (grid class-entry 0 2 :padx 10 :pady 5)
      (grid stream-label 1 0 :padx 10 :pady 5)
      (grid stream-entry 1 2 :padx 10 :pady 5)
      (grid subject-label 2 0 :padx 10 :pady 5)
      (grid subject-entry 2 2 :padx 10 :pady 5)
      (grid paper-label 3 0 :padx 10 :pady 5)
      (grid paper-entry 3 2 :padx 10 :pady 5)
      (grid save-button 4 2 :pady 10))
    ))

(defun show-papers ()
  "Show papers of a subject of a stream"
  (unless (null *school-info-main-frame*)
    (ltk:destroy *school-info-main-frame*))
  (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
  (prepare-main-window)
;;; define a local recursive function count, displays the levels one below the other
;;; index keeps track of the row in the window to add widget to
;;; show the class and stream, then list subjects under each, then papers under each
  (let ((index 1)
	(levels (|get-level|)))
    (if (eq 0 (length levels))
	(progn
	  (grid (make-instance 'label :master *school-info-main-frame* :text "No level has been added yet") 1 0 :padx 10 :pady 5)
	  (setq index (+ index 1)))
	(dolist (level levels)
	  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr level)) index 0)
	  (setq index (+ index 1))
	  (let ((classes (get-classes (car level))))
	    (if (eq 0 (length classes))
		(progn (grid (make-instance 'label :master *school-info-main-frame* :text "No classes yet.") index 2)
		       (setq index (+ index 1)))
		(dolist (class classes)
		  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr class)) index 2)
		  (setq index (+ index 1))
		  (let ((streams (get-streams (car class))))
		    (if (eq 0 (length streams))
			(progn (grid (make-instance 'label :master *school-info-main-frame* :text "No streams yet.") index 3)
			       (setq index (+ index 1)))
			(dolist (stream streams)
			  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr stream)) index 3)
			  (setq index (+ 1 index))
			  (let ((subjects (get-subjects (car stream))))
			    (if (eq 0 (length subjects))
				(progn  (grid (make-instance 'label :master *school-info-main-frame* :text "No subjects yet.") index 4)
					(setq index (+ 1 index)))
				(dolist (subject subjects)
				  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr subject)) index 4)
				  (setq index (+ 1 index))
				  (let ((papers (get-papers (car subject))))
				    (if (eq 0 (length papers))
					(progn  (grid (make-instance 'label :master *school-info-main-frame* :text "No papers yet.") index 5)
						(setq index (+ 1 index)))
					(dolist (paper papers)
					  (grid (make-instance 'label :master *school-info-main-frame* :text (cadr paper)) index 5)
					  (setq index (+ index 1)))))))))
			)))))
	  (setq index (+ index 1))))))

(defun show-stream-subjects (stream-data)
  "get and display all subjects for a particular stream"
  (let ((stream-subjects (get-stream-subjects (car stream-data))))
    (unless (null *school-info-main-frame*)
      (ltk:destroy *school-info-main-frame*))
    (setq *school-info-main-frame* (make-instance 'frame :borderwidth 5 :relief :ridge))
    (if stream-subjects
	(let* ((subjects-label (make-instance 'label :master *school-info-main-frame* :text (format nil "Subjects for ~a - ~a" (get-class-name (caddr stream-data)) (cadr stream-data))))
	       (subject-listbox (make-instance 'listbox :master *school-info-main-frame*)))
	  (prepare-main-window)
	  (listbox-append subject-listbox (mapcar #'cadr stream-subjects))
	  (grid subjects-label 0 0 :padx 10 :pady 5)
	  (grid subject-listbox 1 0 :padx 10 :pady 5))
	(let ((error-text (make-instance 'label :master *school-info-main-frame* :text (format nil "There are no subjects for ~a ~a." (get-class-name (caddr stream-data)) (cadr stream-data)))))
	  (prepare-main-window)
	  (grid error-text 0 0 :padx 10 :pady 5))
	)))
